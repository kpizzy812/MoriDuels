#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ MORI Duels Bot
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from utils.logger import setup_logger

logger = setup_logger(__name__)


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞"""
    env_path = Path(".env")

    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        "MAIN_BOT_TOKEN",
        "USER_BOT_TOKEN",
        "DATABASE_URL",
        "MORI_TOKEN_MINT",
        "BOT_WALLET_ADDRESS",
        "ADMIN_IDS"
    ]

    missing_vars = []
    with open(env_path, 'r') as f:
        env_content = f.read()

        for var in required_vars:
            if f"{var}=" not in env_content or f"{var}=your_" in env_content:
                missing_vars.append(var)

    if missing_vars:
        print("‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}")
        print("\nüìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return False

    return True


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import psycopg2
        from config.settings import DB_CONFIG

        conn = psycopg2.connect(**DB_CONFIG)
        conn.close()

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: OK")
        return True

    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install psycopg2-binary")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ .env")
        return False


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        from database.connection import init_db
        await init_db()

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False


async def test_apis():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Solana RPC
        from services.solana_service import solana_service
        from config.settings import SOLANA_RPC_URL

        print(f"üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Solana RPC: {SOLANA_RPC_URL}")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
        response = await solana_service.client.get_latest_blockhash()
        if response:
            print("‚úÖ Solana RPC: OK")
        else:
            print("‚ö†Ô∏è Solana RPC: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Jupiter API
        from services.jupiter_service import jupiter_service
        print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ Jupiter API...")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã SOL
        sol_mint = "So11111111111111111111111111111111111111112"
        price_data = await jupiter_service.get_token_price(sol_mint)

        if price_data:
            print("‚úÖ Jupiter API: OK")
        else:
            print("‚ö†Ô∏è Jupiter API: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ü–µ–Ω)")

        return True

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞


def show_startup_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    print("\n" + "=" * 50)
    print("ü™ô MORI Duels Bot")
    print("=" * 50)
    print("üéÆ Telegram –±–æ—Ç –¥–ª—è –¥—É—ç–ª–µ–π –Ω–∞ MORI —Ç–æ–∫–µ–Ω–∞—Ö")
    print("‚õìÔ∏è Blockchain: Solana")
    print("üí∞ –¢–æ–∫–µ–Ω: MORI")
    print("=" * 50 + "\n")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    show_startup_info()

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    if not check_env_file():
        sys.exit(1)

    if not check_database():
        sys.exit(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    if not await init_database():
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    await test_apis()

    print("\nüöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...\n")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º main
        from main import main as run_bots
        await run_bots()

    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–æ–≤...")
        logger.info("Bot stopped by user")

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"Critical error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")