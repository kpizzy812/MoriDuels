#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
from pathlib import Path


def check_current_settings():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")

    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False

    with open(env_path, 'r') as f:
        content = f.read()

    # –ò—â–µ–º DATABASE_URL
    for line in content.split('\n'):
        if line.startswith('DATABASE_URL='):
            print(f"üìã –¢–µ–∫—É—â–∏–π DATABASE_URL: {line}")

            if 'username:password' in line:
                print("‚ùå –í DATABASE_URL –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
                return False
            elif 'sqlite' in line:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite")
                return True
            else:
                print("‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL")
                return True

    print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    return False


def fix_to_sqlite():
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ SQLite"""
    print("\nüîß –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ SQLite...")

    env_path = Path(".env")
    with open(env_path, 'r') as f:
        content = f.read()

    # –ó–∞–º–µ–Ω—è–µ–º DATABASE_URL –Ω–∞ SQLite
    lines = content.split('\n')
    for i, line in enumerate(lines):
        if line.startswith('DATABASE_URL='):
            lines[i] = 'DATABASE_URL=sqlite+aiosqlite:///./mori_duels.db'
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(env_path, 'w') as f:
        f.write('\n'.join(lines))

    print("‚úÖ DATABASE_URL –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ SQLite")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º aiosqlite
    try:
        import aiosqlite
        print("‚úÖ aiosqlite —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º aiosqlite...")
        import subprocess
        subprocess.run([sys.executable, "-m", "pip", "install", "aiosqlite"], check=True)
        print("‚úÖ aiosqlite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def setup_postgresql():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è PostgreSQL"""
    print("\nüêò –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ PostgreSQL:")
    print("   sudo systemctl start postgresql  # Linux")
    print("   brew services start postgresql  # macOS")
    print()
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ë–î:")
    print("   sudo -u postgres psql")
    print("   CREATE USER mori_user WITH PASSWORD 'secure_password_123';")
    print("   CREATE DATABASE mori_duels;")
    print("   GRANT ALL PRIVILEGES ON DATABASE mori_duels TO mori_user;")
    print("   \\q")
    print()
    print("3. –û–±–Ω–æ–≤–∏—Ç–µ .env:")
    print("   DATABASE_URL=postgresql+asyncpg://mori_user:secure_password_123@localhost:5432/mori_duels")


def check_telegram_token():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")

    from dotenv import load_dotenv
    load_dotenv()

    bot_token = os.getenv('MAIN_BOT_TOKEN')

    if not bot_token:
        print("‚ùå MAIN_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return False
    elif bot_token.startswith('1234567890'):
        print("‚ùå MAIN_BOT_TOKEN —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        print("üìù –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —É @BotFather")
        return False
    elif ':' not in bot_token:
        print("‚ùå MAIN_BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        print("üìù –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 1234567890:ABCdefGHIjklMNO...")
        return False
    else:
        print("‚úÖ MAIN_BOT_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if check_current_settings():
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print("1. SQLite (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
        print("2. PostgreSQL (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞)")

        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2): ").strip()

        if choice == "1":
            fix_to_sqlite()
        elif choice == "2":
            setup_postgresql()
            print("\n‚ö†Ô∏è  –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç")
            return
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    check_telegram_token()

    print("\n" + "=" * 50)
    print("üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ SQLite - –≥–æ—Ç–æ–≤–æ!")
    print("2. –ï—Å–ª–∏ PostgreSQL - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ")
    print("3. –û–±–Ω–æ–≤–∏—Ç–µ MAIN_BOT_TOKEN –≤ .env (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)")
    print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python init_db.py")
    print()
    print("üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("   - DATABASE_URL (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω)")
    print("   - MAIN_BOT_TOKEN (–Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π)")
    print("   - ADMIN_IDS (–≤–∞—à Telegram ID –æ—Ç @userinfobot)")


if __name__ == "__main__":
    main()