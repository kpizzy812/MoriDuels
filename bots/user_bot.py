"""
User bot –Ω–∞ Telethon –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ü–µ–Ω –≤ –∫–∞–Ω–∞–ª–∞—Ö
"""
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, Set

from telethon import TelegramClient, events
from telethon.tl.types import Message

from config.settings import CHANNEL_IDS, MORI_TOKEN_MINT
from services.jupiter_service import jupiter_service, format_price_message
from services.chart_service import chart_service  # –ù–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
from utils.logger import setup_logger

logger = setup_logger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è user bot
API_ID = int(os.getenv('TELEGRAM_API_ID', '0'))  # –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ my.telegram.org
API_HASH = os.getenv('TELEGRAM_API_HASH', '')
PHONE = os.getenv('TELEGRAM_PHONE', '')  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
SESSION_NAME = 'mori_user_bot'

# –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
class AntiSpam:
    def __init__(self):
        self.last_requests: Dict[int, datetime] = {}  # chat_id -> last_request_time
        self.user_requests: Dict[int, int] = {}  # user_id -> request_count_today
        self.daily_reset_time = datetime.now().replace(hour=0, minute=0, second=0)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        self.CHAT_COOLDOWN = timedelta(minutes=5)  # –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —á–∞—Ç–µ
        self.USER_DAILY_LIMIT = 10  # –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–µ–Ω—å
        self.GLOBAL_DAILY_LIMIT = 100  # –ú–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—Å–µ–≥–æ
        self.global_requests_today = 0

    def can_process_request(self, chat_id: int, user_id: int) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        now = datetime.now()

        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
        if now.date() > self.daily_reset_time.date():
            self.user_requests.clear()
            self.global_requests_today = 0
            self.daily_reset_time = now.replace(hour=0, minute=0, second=0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        if self.global_requests_today >= self.GLOBAL_DAILY_LIMIT:
            return False, "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_requests = self.user_requests.get(user_id, 0)
        if user_requests >= self.USER_DAILY_LIMIT:
            return False, f"üö´ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({self.USER_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤)"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ —á–∞—Ç–∞
        last_request = self.last_requests.get(chat_id)
        if last_request and (now - last_request) < self.CHAT_COOLDOWN:
            remaining = self.CHAT_COOLDOWN - (now - last_request)
            minutes = int(remaining.total_seconds() // 60)
            return False, f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω"

        return True, ""

    def register_request(self, chat_id: int, user_id: int):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å"""
        now = datetime.now()
        self.last_requests[chat_id] = now
        self.user_requests[user_id] = self.user_requests.get(user_id, 0) + 1
        self.global_requests_today += 1

        logger.info(f"üìä Registered request: chat {chat_id}, user {user_id}, "
                   f"user_today: {self.user_requests[user_id]}, global_today: {self.global_requests_today}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º
anti_spam = AntiSpam()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)


@client.on(events.NewMessage(pattern='/–∫—É—Ä—Å'))
async def price_command(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–∫—É—Ä—Å"""
    try:
        chat_id = event.chat_id
        user_id = event.sender_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
        if CHANNEL_IDS and chat_id not in CHANNEL_IDS:
            logger.warning(f"‚ö†Ô∏è Price command in unauthorized chat: {chat_id}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω—Ç–∏—Å–ø–∞–º
        can_process, error_msg = anti_spam.can_process_request(chat_id, user_id)
        if not can_process:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —á–∞—Ç–µ
            try:
                await client.send_message(user_id, f"‚ùå {error_msg}")
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        anti_spam.register_request(chat_id, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        async with client.action(chat_id, 'typing'):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
            logger.info(f"üîç Fetching MORI price data for chat {chat_id}")
            price_data = await jupiter_service.get_mori_price()

            if not price_data:
                await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ MORI")
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            logger.info(f"üìä Generating chart for MORI")
            chart_path = await chart_service.generate_candlestick_chart(
                token_mint=MORI_TOKEN_MINT,
                period="24h",
                style="dark_yellow"  # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω —Å –∂–µ–ª—Ç—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            )

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            price_message = await format_advanced_price_message(price_data)

            if chart_path and os.path.exists(chart_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º
                await client.send_file(
                    chat_id,
                    chart_path,
                    caption=price_message,
                    parse_mode='md'
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(chart_path)
                except:
                    pass

                logger.info(f"‚úÖ Sent price chart to chat {chat_id}")
            else:
                # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await event.reply(price_message, parse_mode='md')
                logger.info(f"‚úÖ Sent price text to chat {chat_id}")

    except Exception as e:
        logger.error(f"‚ùå Error in price command: {e}")
        try:
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
        except:
            pass


@client.on(events.NewMessage(pattern='/–≥—Ä–∞—Ñ–∏–∫'))
async def chart_command(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /–≥—Ä–∞—Ñ–∏–∫ - —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"""
    try:
        chat_id = event.chat_id
        user_id = event.sender_id

        if CHANNEL_IDS and chat_id not in CHANNEL_IDS:
            return

        can_process, error_msg = anti_spam.can_process_request(chat_id, user_id)
        if not can_process:
            try:
                await client.send_message(user_id, f"‚ùå {error_msg}")
            except:
                pass
            return

        anti_spam.register_request(chat_id, user_id)

        async with client.action(chat_id, 'upload_photo'):
            chart_path = await chart_service.generate_candlestick_chart(
                token_mint=MORI_TOKEN_MINT,
                period="24h",
                style="dark_yellow"
            )

            if chart_path and os.path.exists(chart_path):
                await client.send_file(
                    chat_id,
                    chart_path,
                    caption="üìä –ì—Ä–∞—Ñ–∏–∫ MORI/SOL –∑–∞ 24 —á–∞—Å–∞"
                )

                try:
                    os.remove(chart_path)
                except:
                    pass

                logger.info(f"‚úÖ Sent chart to chat {chat_id}")
            else:
                await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫")

    except Exception as e:
        logger.error(f"‚ùå Error in chart command: {e}")


@client.on(events.NewMessage(pattern='/—Å—Ç–∞—Ç—É—Å'))
async def status_command(event):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    try:
        user_id = event.sender_id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤)
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

        stats = f"""üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

üïí –°–µ–≥–æ–¥–Ω—è –∑–∞–ø—Ä–æ—Å–æ–≤: {anti_spam.global_requests_today}/{anti_spam.GLOBAL_DAILY_LIMIT}
üë§ –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {anti_spam.user_requests.get(user_id, 0)}/{anti_spam.USER_DAILY_LIMIT}
‚è∞ –ö—É–ª–¥–∞—É–Ω —á–∞—Ç–æ–≤: {int(anti_spam.CHAT_COOLDOWN.total_seconds() // 60)} –º–∏–Ω

üéØ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: {len(CHANNEL_IDS) if CHANNEL_IDS else '–í—Å–µ'}"""

        await event.reply(stats)

    except Exception as e:
        logger.error(f"‚ùå Error in status command: {e}")


async def format_advanced_price_message(price_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π"""
    try:
        price_usd = price_data["price_usd"]
        price_sol = price_data.get("price_sol")
        market_cap = price_data.get("market_cap") or price_data.get("calculated_market_cap")
        volume_24h = price_data.get("volume_24h")

        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        message = f"""ü™ô **MORI/SOL**

üí∞ **–¶–µ–Ω–∞:** ${price_usd:.6f}"""

        if price_sol:
            message += f" ({price_sol:.6f} SOL)"

        if market_cap:
            if market_cap >= 1_000_000:
                message += f"\nüìä **MCAP:** ${market_cap / 1_000_000:.1f}M"
            else:
                message += f"\nüìä **MCAP:** ${market_cap:,.0f}"

        if volume_24h:
            if volume_24h >= 1_000_000:
                message += f"\nüìà **Volume 24h:** ${volume_24h / 1_000_000:.1f}M"
            else:
                message += f"\nüìà **Volume 24h:** ${volume_24h:,.0f}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        message += f"""

üîó **–¢–æ—Ä–≥–æ–≤–ª—è:**
‚Ä¢ [Raydium](https://raydium.io/swap/?inputCurrency=sol&outputCurrency={MORI_TOKEN_MINT})
‚Ä¢ [Jupiter](https://jup.ag/swap/SOL-{MORI_TOKEN_MINT})

‚è∞ {datetime.now().strftime('%H:%M UTC')}"""

        return message

    except Exception as e:
        logger.error(f"‚ùå Error formatting price message: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"


async def setup_user_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ user bot"""
    try:
        logger.info("üîß Setting up user bot...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not API_ID or not API_HASH:
            logger.error("‚ùå API_ID and API_HASH must be set in environment")
            return False

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await client.start(phone=PHONE)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        me = await client.get_me()
        logger.info(f"‚úÖ User bot started as: {me.first_name} (@{me.username})")
        logger.info(f"üìã Authorized channels: {CHANNEL_IDS}")
        logger.info(f"üõ°Ô∏è Anti-spam: {anti_spam.CHAT_COOLDOWN.total_seconds()//60}min cooldown, "
                   f"{anti_spam.USER_DAILY_LIMIT} per user/day")

        return True

    except Exception as e:
        logger.error(f"‚ùå Error setting up user bot: {e}")
        return False


async def user_bot_polling():
    """–ó–∞–ø—É—Å–∫ user bot"""
    try:
        if not await setup_user_bot():
            logger.error("‚ùå Failed to setup user bot")
            return

        logger.info("üöÄ Starting user bot polling...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await client.run_until_disconnected()

    except KeyboardInterrupt:
        logger.info("üõë User bot stopped by user")
    except Exception as e:
        logger.error(f"‚ùå Error in user bot: {e}")
        raise
    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(user_bot_polling())