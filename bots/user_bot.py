"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /–∫—É—Ä—Å –≤ –∫–∞–Ω–∞–ª–∞—Ö
"""
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage

from config.settings import USER_BOT_TOKEN, CHANNEL_IDS, MORI_TOKEN_MINT
from services.jupiter_service import jupiter_service, format_price_message
from utils.logger import setup_logger

logger = setup_logger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=USER_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


@dp.message(Command("–∫—É—Ä—Å"))
async def price_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /–∫—É—Ä—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω—ã MORI"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ
    chat_id = message.chat.id
    if CHANNEL_IDS and chat_id not in CHANNEL_IDS:
        logger.warning(f"‚ö†Ô∏è Price command called in unauthorized chat: {chat_id}")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ MORI...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ
        price_data = await jupiter_service.get_mori_price()

        if not price_data:
            await loading_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ MORI\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        price_message = format_price_message(price_data, "MORI")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        chart_path = await jupiter_service.generate_price_chart(MORI_TOKEN_MINT)

        if chart_path:
            try:
                chart_file = FSInputFile(chart_path)
                await loading_msg.delete()
                await message.answer_photo(
                    chart_file,
                    caption=price_message,
                    parse_mode="Markdown"
                )
                logger.info(f"‚úÖ Sent price with chart to chat {chat_id}")
            except Exception as e:
                logger.error(f"‚ùå Error sending chart: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await loading_msg.edit_text(price_message, parse_mode="Markdown")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await loading_msg.edit_text(price_message, parse_mode="Markdown")
            logger.info(f"‚úÖ Sent price text to chat {chat_id}")

    except Exception as e:
        logger.error(f"‚ùå Error in price command: {e}")
        try:
            await loading_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")


@dp.message(Command("chart"))
async def chart_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /chart –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    chat_id = message.chat.id
    if CHANNEL_IDS and chat_id not in CHANNEL_IDS:
        return

    try:
        loading_msg = await message.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ MORI...")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_path = await jupiter_service.generate_price_chart(MORI_TOKEN_MINT, period="24h")

        if chart_path:
            try:
                chart_file = FSInputFile(chart_path)
                await loading_msg.delete()
                await message.answer_photo(
                    chart_file,
                    caption="üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã MORI –∑–∞ 24 —á–∞—Å–∞"
                )
                logger.info(f"‚úÖ Sent chart to chat {chat_id}")
            except Exception as e:
                logger.error(f"‚ùå Error sending chart: {e}")
                await loading_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞")
        else:
            await loading_msg.edit_text(
                "‚ùå –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∫—É—Ä—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"
            )

    except Exception as e:
        logger.error(f"‚ùå Error in chart command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")


@dp.message(Command("info"))
async def info_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /info –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    chat_id = message.chat.id
    if CHANNEL_IDS and chat_id not in CHANNEL_IDS:
        return

    try:
        loading_msg = await message.answer("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ MORI...")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        market_data = await jupiter_service.get_market_data(MORI_TOKEN_MINT)

        if not market_data:
            await loading_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        info_message = f"""‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ MORI

üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {market_data.get('name', 'MORI Token')}
üîñ –°–∏–º–≤–æ–ª: {market_data.get('symbol', 'MORI')}
üìç –ê–¥—Ä–µ—Å: `{MORI_TOKEN_MINT}`

üí∞ –¶–µ–Ω–∞: ${market_data['price_usd']:.6f}"""

        if market_data.get('price_sol'):
            info_message += f" ({market_data['price_sol']:.6f} SOL)"

        if market_data.get('market_cap') or market_data.get('calculated_market_cap'):
            mcap = market_data.get('market_cap') or market_data.get('calculated_market_cap')
            if mcap >= 1_000_000:
                info_message += f"\nüìä Market Cap: ${mcap / 1_000_000:.1f}M"
            else:
                info_message += f"\nüìä Market Cap: ${mcap:,.0f}"

        if market_data.get('supply'):
            supply = market_data['supply']
            if supply >= 1_000_000_000:
                info_message += f"\nü™ô Supply: {supply / 1_000_000_000:.1f}B"
            elif supply >= 1_000_000:
                info_message += f"\nü™ô Supply: {supply / 1_000_000:.1f}M"
            else:
                info_message += f"\nü™ô Supply: {supply:,.0f}"

        if market_data.get('decimals'):
            info_message += f"\nüî¢ Decimals: {market_data['decimals']}"

        info_message += f"\n\nüîó –¢–æ—Ä–≥–æ–≤–ª—è:\n‚Ä¢ [Raydium](https://raydium.io/swap/?inputCurrency=sol&outputCurrency={MORI_TOKEN_MINT})\n‚Ä¢ [Jupiter](https://jup.ag/swap/SOL-{MORI_TOKEN_MINT})"

        await loading_msg.edit_text(info_message, parse_mode="Markdown")
        logger.info(f"‚úÖ Sent token info to chat {chat_id}")

    except Exception as e:
        logger.error(f"‚ùå Error in info command: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


@dp.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    chat_id = message.chat.id
    if CHANNEL_IDS and chat_id not in CHANNEL_IDS:
        return

    help_text = """‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/–∫—É—Ä—Å - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ MORI
/chart - –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∑–∞ 24—á
/info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéÆ –•–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å —Å MORI —Ç–æ–∫–µ–Ω–∞–º–∏?
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –±–æ—Ç—É: @moriduels_bot"""

    await message.answer(help_text)
    logger.info(f"‚úÖ Sent help to chat {chat_id}")


async def setup_user_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    logger.info("üîß Setting up user bot...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    from aiogram.types import BotCommand
    await bot.set_my_commands([
        BotCommand(command="–∫—É—Ä—Å", description="üí∞ –¶–µ–Ω–∞ MORI"),
        BotCommand(command="chart", description="üìä –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"),
        BotCommand(command="info", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
    ])

    logger.info("‚úÖ User bot setup complete")


async def user_bot_polling():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    try:
        await setup_user_bot()

        logger.info("üöÄ Starting user bot polling...")
        logger.info(f"üìã Authorized channels: {CHANNEL_IDS}")

        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå Error in user bot: {e}")
        raise
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(user_bot_polling())