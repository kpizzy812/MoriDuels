"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
"""
from decimal import Decimal

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.models.user import User
from database.models.duel import Duel
from bots.keyboards.main_menu import get_main_menu, get_bet_amounts, get_coin_flip
from services.game_service import game_service
from config.settings import MIN_BET, MAX_BET
from utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


class GameStates(StatesGroup):
    waiting_for_custom_bet = State()


@router.callback_query(F.data == "quick_game")
async def quick_game_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ–π –∏–≥—Ä—ã"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.message.edit_text(
            """‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        f"""üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI
üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:

‚ö° –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
–∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç –∏–≥—Ä—É —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥""",
        reply_markup=get_bet_amounts()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("bet_"))
async def process_bet_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã)
    if callback.message.text and "–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞" not in callback.message.text:
        return  # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–Ω–∞—Ç

    user_id = callback.from_user.id
    bet_data = callback.data.split("_")[1]

    if bet_data == "custom":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç–∞–≤–∫—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="quick_game")]
        ])

        await callback.message.edit_text(
            f"""‚úèÔ∏è –°–≤–æ—è —Å—Ç–∞–≤–∫–∞

üí∞ –ú–∏–Ω–∏–º—É–º: {MIN_BET:,.0f} MORI
üìà –ú–∞–∫—Å–∏–º—É–º: {MAX_BET:,.0f} MORI

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:""",
            reply_markup=keyboard
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        from bots.main_bot import dp
        state = dp.fsm.get_context(bot=callback.bot, chat_id=callback.message.chat.id, user_id=user_id)
        await state.set_state(GameStates.waiting_for_custom_bet)
        await callback.answer()
        return

    try:
        stake = Decimal(bet_data)
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏", show_alert=True)
        return

    await start_quick_match(callback, user_id, stake)


@router.message(GameStates.waiting_for_custom_bet)
async def process_custom_bet(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏"""
    try:
        stake = Decimal(message.text.strip())

        if stake < MIN_BET:
            await message.answer(
                f"‚ùå –°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞! –ú–∏–Ω–∏–º—É–º: {MIN_BET:,.0f} MORI",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="quick_game")]
                ])
            )
            return

        if stake > MAX_BET:
            await message.answer(
                f"‚ùå –°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è! –ú–∞–∫—Å–∏–º—É–º: {MAX_BET:,.0f} MORI",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="quick_game")]
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

            async def answer(self, text=None, show_alert=False):
                pass

        fake_callback = FakeCallback(message)
        await start_quick_match(fake_callback, message.from_user.id, stake)

    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="quick_game")]
            ])
        )
        return
    except Exception as e:
        logger.error(f"‚ùå Error processing custom bet: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏")

    await state.clear()


async def start_quick_match(callback, user_id: int, stake: Decimal):
    """–ù–∞—á–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∏–≥—Ä—ã"""
    try:
        user = await User.get_by_telegram_id(user_id)

        if not user or user.balance < stake:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="quick_game")]
                ])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –∏–≥—Ä—ã
        await callback.message.edit_text(
            f"""üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã...

üí∞ –°—Ç–∞–≤–∫–∞: {stake:,.0f} MORI
‚è∞ –ò—â–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞...

–ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–æ 10 —Å–µ–∫—É–Ω–¥""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="quick_game")]
            ])
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        result = await game_service.quick_match(user_id, stake)

        if "error" in result:
            await callback.message.edit_text(
                f"‚ùå {result['error']}",
                reply_markup=get_main_menu()
            )
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
        if result["type"] == "real_duel":
            opponent_text = f"üë§ –û–ø–ø–æ–Ω–µ–Ω—Ç: @{result['opponent']}"
        else:
            opponent_text = f"ü§ñ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫: {result['opponent']}"

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: —Å–≤–æ—è —Å—Ç–∞–≤–∫–∞ + 70% –æ—Ç —Å—Ç–∞–≤–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        potential_win = stake + (stake * Decimal('0.7'))

        game_text = f"""‚úÖ –ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!

{opponent_text}
üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {stake:,.0f} MORI
üèÜ –ü—Ä–∏ –ø–æ–±–µ–¥–µ –ø–æ–ª—É—á–∏—Ç–µ: {potential_win:,.0f} MORI
üí° (—Å–≤–æ—è —Å—Ç–∞–≤–∫–∞ + 70% –æ—Ç —Å—Ç–∞–≤–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞)

–ì–æ—Ç–æ–≤—ã –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É?"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£", callback_data=f"flip_{result['duel_id']}")]
        ])

        await callback.message.edit_text(game_text, reply_markup=keyboard)

        logger.info(f"‚úÖ Quick match found for user {user_id}: duel {result['duel_id']}")

    except Exception as e:
        logger.error(f"‚ùå Error in start_quick_match: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã",
            reply_markup=get_main_menu()
        )


@router.callback_query(F.data.startswith("flip_"))
async def flip_coin(callback: CallbackQuery):
    """–ë—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã"""
    try:
        duel_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –±—Ä–æ—Å–∫–∞
        await callback.message.edit_text(
            """üé≤ –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç—É...

ü™ô –ú–æ–Ω–µ—Ç–∞ –≤ –≤–æ–∑–¥—É—Ö–µ...
‚è≥ –ñ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[])
        )

        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        import asyncio
        await asyncio.sleep(2)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫
        result = await game_service.flip_coin(duel_id)

        if "error" in result:
            await callback.message.edit_text(
                f"‚ùå {result['error']}",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        player_won = (result["winner_id"] == user_id)
        coin_emoji = "üü°" if result["coin_result"] == "heads" else "‚ö™"
        coin_text = "–û–†–ï–õ" if result["coin_result"] == "heads" else "–†–ï–®–ö–ê"

        if player_won:
            result_text = f"""üéâ –ü–û–ë–ï–î–ê! üéâ

{coin_emoji} –í—ã–ø–∞–ª: {coin_text}
üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {result['winner_amount']:,.2f} MORI

üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="quick_game")],
                [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            if result["is_house_duel"]:
                opponent_name = result["house_account"]
            else:
                opponent_user = await User.get_by_telegram_id(result["winner_id"])
                opponent_name = f"@{opponent_user.username}" if opponent_user and opponent_user.username else f"Player {result['winner_id']}"

            result_text = f"""üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

{coin_emoji} –í—ã–ø–∞–ª: {coin_text}
üòî –ü–æ–±–µ–¥–∏–ª: {opponent_name}
üí∏ –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –†–µ–≤–∞–Ω—à", callback_data="quick_game")],
                [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

        await callback.message.edit_text(result_text, reply_markup=keyboard)

        # –ï—Å–ª–∏ —ç—Ç–æ –¥—É—ç–ª—å –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if not result["is_house_duel"] and result["player2_id"] and result["player2_id"] != user_id:
            await notify_opponent(result["player2_id"], result, user_id)

        logger.info(f"‚úÖ Coin flip completed for duel {duel_id}: {result['coin_result']}")

    except Exception as e:
        logger.error(f"‚ùå Error in flip_coin: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ –º–æ–Ω–µ—Ç—ã",
            reply_markup=get_main_menu()
        )

    await callback.answer()


async def notify_opponent(opponent_id: int, result: dict, current_user_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    try:
        from bots.main_bot import bot
        from utils.notification_utils import safe_notify_opponent

        await safe_notify_opponent(bot, opponent_id, result, current_user_id)

    except Exception as e:
        logger.error(f"‚ùå Error notifying opponent {opponent_id}: {e}")


@router.callback_query(F.data == "rules")
async def show_game_rules(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã (–¥—É–±–ª–∏—Ä—É–µ—Ç stats.py, –Ω–æ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)"""
    await callback.message.edit_text(
        """‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞ MORI Duels

üéÆ –ö–∞–∫ –∏–≥—Ä–∞—Ç—å:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏
2. –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
3. –ë—Ä–æ—Å—å—Ç–µ –º–æ–Ω–µ—Ç—É - –æ—Ä–µ–ª –∏–ª–∏ —Ä–µ—à–∫–∞
4. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª—É—á–∞–µ–Ω (50/50)

üí∞ –í—ã–ø–ª–∞—Ç—ã:
‚Ä¢ –ü—Ä–∏ –ø–æ–±–µ–¥–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
  - –°–≤–æ—é —Å—Ç–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ
  - + 70% –æ—Ç —Å—Ç–∞–≤–∫–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
‚Ä¢ –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ —Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É
‚Ä¢ 30% –æ—Ç —Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ - –∫–æ–º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –¥–ª—è –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üìä –ü—Ä–∏–º–µ—Ä (—Å—Ç–∞–≤–∫–∞ 100 MORI):
‚Ä¢ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: 100 MORI
‚Ä¢ –°—Ç–∞–≤–∫–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: 100 MORI
‚Ä¢ –ü—Ä–∏ –ø–æ–±–µ–¥–µ –ø–æ–ª—É—á–∏—Ç–µ: 170 MORI
‚Ä¢ –ü—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏: 0 MORI

üéØ –¢–∏–ø—ã –∏–≥—Ä:
‚Ä¢ üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä
‚Ä¢ üè† –ö–æ–º–Ω–∞—Ç—ã - –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∏–≥—Ä—ã

üçÄ –£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="quick_game")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )
    await callback.answer()