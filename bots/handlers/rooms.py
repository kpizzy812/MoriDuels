"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–Ω–∞—Ç
"""
from decimal import Decimal

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.models.user import User
from database.models.room import Room, RoomStatus
from bots.keyboards.main_menu import get_main_menu, get_bet_amounts
from config.settings import MIN_BET, MAX_BET
from utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


class RoomStates(StatesGroup):
    waiting_for_room_stake = State()
    waiting_for_room_code = State()


@router.callback_query(F.data == "rooms")
async def rooms_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–Ω–∞—Ç"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.message.edit_text(
            """‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
    await Room.cleanup_expired_rooms()  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ
    active_rooms = await Room.get_active_rooms(limit=10)

    rooms_text = f"""üè† –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI

üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:"""

    keyboard_rows = [
        [
            InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_room"),
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ –∫–æ–¥—É", callback_data="find_room")
        ]
    ]

    if active_rooms:
        rooms_text += "\n"
        for room in active_rooms[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            creator = await User.get_by_telegram_id(room.creator_id)
            creator_name = creator.username if creator and creator.username else f"Player {room.creator_id}"
            time_left = room.get_time_left()
            minutes_left = int(time_left.total_seconds() // 60)

            rooms_text += f"\nüí∞ {room.stake:,.0f} MORI - @{creator_name}"
            rooms_text += f" ‚è∞ {minutes_left}–º"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            keyboard_rows.append([
                InlineKeyboardButton(
                    text=f"üéÆ –ò–≥—Ä–∞—Ç—å {room.stake:,.0f} MORI",
                    callback_data=f"join_room_{room.room_code}"
                )
            ])
    else:
        rooms_text += "\n\nüîç –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç\n‚ûï –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é!"

    keyboard_rows.append([
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="rooms")
    ])
    keyboard_rows.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await callback.message.edit_text(rooms_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "create_room")
async def create_room_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    await callback.message.edit_text(
        f"""‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI
üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:""",
        reply_markup=get_bet_amounts()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("bet_"))
async def process_room_bet_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    if callback.message.text and "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É" not in callback.message.text:
        return  # –≠—Ç–æ –Ω–µ –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    user_id = callback.from_user.id
    bet_data = callback.data.split("_")[1]

    if bet_data == "custom":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="create_room")]
        ])

        await callback.message.edit_text(
            f"""‚úèÔ∏è –°–≤–æ—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã

üí∞ –ú–∏–Ω–∏–º—É–º: {MIN_BET:,.0f} MORI
üìà –ú–∞–∫—Å–∏–º—É–º: {MAX_BET:,.0f} MORI

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:""",
            reply_markup=keyboard
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
        from bots.main_bot import dp
        state = dp.fsm.get_context(bot=callback.bot, chat_id=callback.message.chat.id, user_id=user_id)
        await state.set_state(RoomStates.waiting_for_room_stake)
        await callback.answer()
        return

    try:
        stake = Decimal(bet_data)
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏", show_alert=True)
        return

    await create_room_with_stake(callback, user_id, stake)


@router.message(RoomStates.waiting_for_room_stake)
async def process_custom_room_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã"""
    try:
        stake = Decimal(message.text.strip())

        if stake < MIN_BET:
            await message.answer(
                f"‚ùå –°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞! –ú–∏–Ω–∏–º—É–º: {MIN_BET:,.0f} MORI",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_room")]
                ])
            )
            return

        if stake > MAX_BET:
            await message.answer(
                f"‚ùå –°—Ç–∞–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è! –ú–∞–∫—Å–∏–º—É–º: {MAX_BET:,.0f} MORI",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_room")]
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

            async def answer(self, text=None, show_alert=False):
                pass

        fake_callback = FakeCallback(message)
        await create_room_with_stake(fake_callback, message.from_user.id, stake)

    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="create_room")]
            ])
        )
        return
    except Exception as e:
        logger.error(f"‚ùå Error processing custom room stake: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–∫–∏")

    await state.clear()


async def create_room_with_stake(callback, user_id: int, stake: Decimal):
    """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π"""
    try:
        user = await User.get_by_telegram_id(user_id)

        if not user or user.balance < stake:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rooms")]
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        room = await Room.create_room(user_id, stake, expires_in_minutes=5)

        if not room:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="rooms")]
                ])
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        bot_username = "moriduels_bot"  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
        share_link = room.get_share_link(bot_username)

        room_text = f"""‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!

üè† –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: `{room.room_code}`
üí∞ –°—Ç–∞–≤–∫–∞: {stake:,.0f} MORI
‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 5 –º–∏–Ω—É—Ç
üîó –°—Å—ã–ª–∫–∞: {share_link}

–ñ–¥–µ–º –∏–≥—Ä–æ–∫–∞... üë•"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data=f"copy_room_{room.room_code}"),
                InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_link)
            ],
            [
                InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data=f"close_room_{room.room_code}")
            ],
            [
                InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")
            ]
        ])

        await callback.message.edit_text(
            room_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

        logger.info(f"‚úÖ Created room {room.room_code} by user {user_id} with stake {stake}")

    except Exception as e:
        logger.error(f"‚ùå Error creating room: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã",
            reply_markup=get_main_menu()
        )


@router.callback_query(F.data.startswith("copy_room_"))
async def copy_room_code(callback: CallbackQuery):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã"""
    room_code = callback.data.split("_")[2]
    await callback.answer(f"üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {room_code}", show_alert=True)


@router.callback_query(F.data.startswith("close_room_"))
async def close_room(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É"""
    room_code = callback.data.split("_")[2]
    user_id = callback.from_user.id

    try:
        room = await Room.get_by_code(room_code)

        if not room:
            await callback.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        if room.creator_id != user_id:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —á—É–∂—É—é –∫–æ–º–Ω–∞—Ç—É!", show_alert=True)
            return

        if room.status != RoomStatus.WAITING:
            await callback.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
        await room.close_room()

        await callback.message.edit_text(
            f"""‚ùå –ö–æ–º–Ω–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞

üè† –ö–æ–¥: {room_code}
üí∞ –°—Ç–∞–≤–∫–∞: {room.stake:,.0f} MORI

–ö–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")]
            ])
        )

        logger.info(f"‚úÖ Closed room {room_code} by user {user_id}")

    except Exception as e:
        logger.error(f"‚ùå Error closing room {room_code}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–æ–º–Ω–∞—Ç—ã", show_alert=True)


@router.callback_query(F.data == "find_room")
async def find_room_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã –ø–æ –∫–æ–¥—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="rooms")]
    ])

    await callback.message.edit_text(
        """üîç –ü–æ–∏—Å–∫ –∫–æ–º–Ω–∞—Ç—ã

–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã (6 —Å–∏–º–≤–æ–ª–æ–≤):
–ù–∞–ø—Ä–∏–º–µ—Ä: ABC123""",
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    from bots.main_bot import dp
    state = dp.fsm.get_context(bot=callback.bot, chat_id=callback.message.chat.id, user_id=callback.from_user.id)
    await state.set_state(RoomStates.waiting_for_room_code)
    await callback.answer()


@router.message(RoomStates.waiting_for_room_code)
async def process_room_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã"""
    room_code = message.text.strip().upper()

    if len(room_code) != 6:
        await message.answer(
            "‚ùå –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="find_room")]
            ])
        )
        return

    try:
        room = await Room.get_by_code(room_code)

        if not room:
            await message.answer(
                f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {room_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥—É—é", callback_data="find_room")],
                    [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")]
                ])
            )
            await state.clear()
            return

        if room.status != RoomStatus.WAITING:
            status_text = {
                RoomStatus.FULL: "–∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
                RoomStatus.EXPIRED: "–∏—Å—Ç–µ–∫–ª–∞",
                RoomStatus.CLOSED: "–∑–∞–∫—Ä—ã—Ç–∞"
            }.get(room.status, "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            await message.answer(
                f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {room_code} {status_text}!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")]
                ])
            )
            await state.clear()
            return

        if room.is_expired():
            await room.expire_room()
            await message.answer(
                f"‚ùå –ö–æ–º–Ω–∞—Ç–∞ {room_code} –∏—Å—Ç–µ–∫–ª–∞!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")]
                ])
            )
            await state.clear()
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        creator = await User.get_by_telegram_id(room.creator_id)
        creator_name = creator.username if creator and creator.username else f"Player {room.creator_id}"
        time_left = room.get_time_left()
        minutes_left = int(time_left.total_seconds() // 60)

        room_info = f"""üè† –ö–æ–º–Ω–∞—Ç–∞ {room_code}

üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator_name}
üí∞ –°—Ç–∞–≤–∫–∞: {room.stake:,.0f} MORI
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {minutes_left} –º–∏–Ω

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ?"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_room_{room_code}")
            ],
            [
                InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")
            ]
        ])

        await message.answer(room_info, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå Error processing room code {room_code}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç—ã")

    await state.clear()


@router.callback_query(F.data.startswith("join_room_"))
async def join_room(callback: CallbackQuery):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ"""
    room_code = callback.data.split("_")[2]
    user_id = callback.from_user.id

    try:
        room = await Room.get_by_code(room_code)

        if not room:
            await callback.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return

        if room.creator_id == user_id:
            await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–π –∫–æ–º–Ω–∞—Ç–µ!", show_alert=True)
            return

        user = await User.get_by_telegram_id(user_id)
        if not user or user.balance < room.stake:
            await callback.message.edit_text(
                f"""‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!

üè† –ö–æ–º–Ω–∞—Ç–∞: {room_code}
üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: {room.stake:,.0f} MORI
üìä –£ –≤–∞—Å: {user.balance if user else 0:,.0f} MORI""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
                    [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")]
                ])
            )
            await callback.answer()
            return

        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –±–∞–ª–∞–Ω—Å–∞
        if not await user.subtract_balance(room.stake):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
            return

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
        duel = await room.join_room(user_id)

        if not duel:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            await user.add_balance(room.stake)
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ!", show_alert=True)
            return

        # –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å
        creator = await User.get_by_telegram_id(room.creator_id)
        creator_name = creator.username if creator and creator.username else f"Player {room.creator_id}"

        success_text = f"""‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!

üéÆ –î—É—ç–ª—å —Å @{creator_name}
üí∞ –°—Ç–∞–≤–∫–∞: {room.stake:,.0f} MORI
üèÜ –í—ã–∏–≥—Ä—ã—à: {room.stake * Decimal('1.7'):,.0f} MORI

–ì–æ—Ç–æ–≤—ã –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É?"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé≤ –ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£", callback_data=f"flip_{duel.id}")]
        ])

        await callback.message.edit_text(success_text, reply_markup=keyboard)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã
        try:
            from bots.main_bot import bot
            joiner_name = user.username if user.username else f"Player {user_id}"
            await bot.send_message(
                room.creator_id,
                f"""üéÆ –ö –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏–≥—Ä–æ–∫!

üë§ –ò–≥—Ä–æ–∫: @{joiner_name}
üè† –ö–æ–º–Ω–∞—Ç–∞: {room_code}
üí∞ –°—Ç–∞–≤–∫–∞: {room.stake:,.0f} MORI

–î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé≤ –ë–†–û–°–ò–¢–¨ –ú–û–ù–ï–¢–£", callback_data=f"flip_{duel.id}")]
                ])
            )
        except Exception as e:
            logger.error(f"‚ùå Error notifying room creator: {e}")

        logger.info(f"‚úÖ User {user_id} joined room {room_code}, duel {duel.id} created")

    except Exception as e:
        logger.error(f"‚ùå Error joining room {room_code}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ", show_alert=True)

    await callback.answer()