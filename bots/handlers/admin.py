"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""
from decimal import Decimal
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from database.models.user import User
from database.models.duel import Duel, DuelStatus
from database.models.transaction import Transaction, TransactionType, TransactionStatus
from services.game_service import game_service
from config.settings import ADMIN_IDS
from utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_admin_stats()

    admin_text = f"""üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}
üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_volume']:,.0f} MORI
üíº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {stats['total_commission']:,.0f} MORI

üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á:
üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users_24h']}
üéÆ –ò–≥—Ä: {stats['games_24h']}
üí∞ –û–±–æ—Ä–æ—Ç: {stats['volume_24h']:,.0f} MORI

üè† House –¥—É—ç–ª–∏:
‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_house_duels']}
üìä –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ: {stats['total_house_games']}"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üéÆ –î—É—ç–ª–∏", callback_data="admin_duels")
        ],
        [
            InlineKeyboardButton(text="üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_transactions"),
            InlineKeyboardButton(text="üè† House —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_house")
        ],
        [
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ])

    await message.answer(admin_text, reply_markup=keyboard)


@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await get_top_users(limit=10)

    users_text = "üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for i, user in enumerate(top_users, 1):
        username = user.username if user.username else f"User {user.telegram_id}"
        users_text += f"{i}. @{username}\n"
        users_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.0f} MORI\n"
        users_text += f"   üéÆ –ò–≥—Ä: {user.total_games} (üèÜ {user.wins})\n"
        users_text += f"   üìà –ü—Ä–∏–±—ã–ª—å: {user.get_profit():+,.0f} MORI\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_user_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(users_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_duels")
async def admin_duels(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É—ç–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏
    active_duels = await get_active_duels()

    duels_text = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏:\n\n"

    if not active_duels:
        duels_text += "üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π"
    else:
        for duel in active_duels[:10]:
            player1 = await User.get_by_telegram_id(duel.player1_id)
            player1_name = player1.username if player1 and player1.username else f"User {duel.player1_id}"

            if duel.is_house_duel:
                duels_text += f"ü§ñ –î—É—ç–ª—å #{duel.id}\n"
                duels_text += f"   üë§ @{player1_name} vs {duel.house_account_name}\n"
                duels_text += f"   üí∞ –°—Ç–∞–≤–∫–∞: {duel.stake:,.0f} MORI\n\n"
            else:
                player2 = await User.get_by_telegram_id(duel.player2_id) if duel.player2_id else None
                player2_name = player2.username if player2 and player2.username else f"User {duel.player2_id}"
                duels_text += f"üë• –î—É—ç–ª—å #{duel.id}\n"
                duels_text += f"   üë§ @{player1_name} vs @{player2_name}\n"
                duels_text += f"   üí∞ –°—Ç–∞–≤–∫–∞: {duel.stake:,.0f} MORI\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† House –¥—É—ç–ª–∏", callback_data="admin_house_duels"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π", callback_data="admin_duel_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(duels_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_house_duels")
async def admin_house_duels(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ House –¥—É—ç–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ house –¥—É—ç–ª–∏
    house_duels = await get_active_house_duels()

    if not house_duels:
        await callback.message.edit_text(
            "üè† House –¥—É—ç–ª–∏\n\nüîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π —Å –±–æ—Ç–∞–º–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_duels")]
            ])
        )
        await callback.answer()
        return

    duels_text = "üè† –ê–∫—Ç–∏–≤–Ω—ã–µ House –¥—É—ç–ª–∏:\n\n"
    keyboard_rows = []

    for duel in house_duels:
        player = await User.get_by_telegram_id(duel.player1_id)
        player_name = player.username if player and player.username else f"User {duel.player1_id}"

        duels_text += f"üéÆ –î—É—ç–ª—å #{duel.id}\n"
        duels_text += f"üë§ @{player_name} vs {duel.house_account_name}\n"
        duels_text += f"üí∞ –°—Ç–∞–≤–∫–∞: {duel.stake:,.0f} MORI\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"‚úÖ #{duel.id} –ò–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç",
                callback_data=f"house_win_{duel.id}_true"
            ),
            InlineKeyboardButton(
                text=f"‚ùå #{duel.id} –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç",
                callback_data=f"house_win_{duel.id}_false"
            )
        ])
        duels_text += "\n"

    keyboard_rows.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_duels")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await callback.message.edit_text(duels_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("house_win_"))
async def admin_house_decision(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è House –¥—É—ç–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        duel_id = int(parts[2])
        player_wins = parts[3] == "true"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã —Å –∞–¥–º–∏–Ω—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º
        result = await game_service.flip_coin(duel_id, admin_decision=player_wins)

        if "error" in result:
            await callback.answer(f"‚ùå {result['error']}", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        outcome = "–ø–æ–±–µ–∂–¥–∞–µ—Ç" if player_wins else "–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç"
        coin_result = "–û–†–ï–õ" if result["coin_result"] == "heads" else "–†–ï–®–ö–ê"

        await callback.answer(
            f"‚úÖ –î—É—ç–ª—å #{duel_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ò–≥—Ä–æ–∫ {outcome}\n–í—ã–ø–∞–ª: {coin_result}",
            show_alert=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—É—ç–ª–µ–π
        await admin_house_duels(callback)

        logger.info(f"‚úÖ Admin decision for duel {duel_id}: player_wins={player_wins}")

    except Exception as e:
        logger.error(f"‚ùå Error in admin house decision: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "admin_transactions")
async def admin_transactions(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    recent_transactions = await get_recent_transactions(limit=10)
    pending_transactions = await Transaction.get_pending_transactions()

    trans_text = f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
    trans_text += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {len(pending_transactions)}\n\n"

    if recent_transactions:
        trans_text += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
        for tx in recent_transactions:
            user = await User.get_by_telegram_id(tx.user_id) if hasattr(tx, 'user_id') else None
            username = user.username if user and user.username else f"User {tx.user_id if hasattr(tx, 'user_id') else 'Unknown'}"

            status_emoji = {
                TransactionStatus.COMPLETED: "‚úÖ",
                TransactionStatus.PENDING: "‚è≥",
                TransactionStatus.FAILED: "‚ùå",
                TransactionStatus.CANCELLED: "üö´"
            }.get(tx.status, "‚ùì")

            trans_text += f"{status_emoji} {tx.get_display_type()}\n"
            trans_text += f"   üë§ @{username}\n"
            trans_text += f"   üí∞ {tx.amount:+,.2f} MORI\n"
            trans_text += f"   üìÖ {tx.created_at.strftime('%d.%m %H:%M')}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_pending_tx"),
            InlineKeyboardButton(text="‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ", callback_data="admin_failed_tx")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_tx_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(trans_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_detailed_stats")
async def admin_detailed_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    stats = await get_detailed_stats()

    stats_text = f"""üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_user_balance']:,.0f} MORI
‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_volume']:,.0f} MORI
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {stats['total_commission']:,.0f} MORI
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_winnings']:,.0f} MORI

üéÆ –ò–≥—Ä—ã:
‚Ä¢ –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: {stats['total_duels']}
‚Ä¢ House –¥—É—ç–ª–µ–π: {stats['house_duels']} ({stats['house_percentage']:.1f}%)
‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö –¥—É—ç–ª–µ–π: {stats['real_duels']} ({100 - stats['house_percentage']:.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {stats['avg_stake']:,.0f} MORI

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–∏–≥—Ä–∞–ª–∏): {stats['active_users']}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_users_week']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {stats['avg_balance']:,.0f} MORI

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –ò–≥—Ä –≤ –¥–µ–Ω—å: {stats['games_per_day']:.1f}
‚Ä¢ –û–±–æ—Ä–æ—Ç –≤ –¥–µ–Ω—å: {stats['volume_per_day']:,.0f} MORI
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–π –≤ –¥–µ–Ω—å: {stats['commission_per_day']:,.0f} MORI"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_chart"),
            InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_financial_report")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def get_admin_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    return {
        'users_count': 127,
        'total_games': 1250,
        'total_volume': 125000,
        'total_commission': 37500,
        'new_users_24h': 5,
        'games_24h': 45,
        'volume_24h': 8500,
        'active_house_duels': 2,
        'total_house_games': 850
    }


async def get_top_users(limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    return []


async def get_active_duels() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    return []


async def get_active_house_duels() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ House –¥—É—ç–ª–∏"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    return []


async def get_recent_transactions(limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    return []


async def get_detailed_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î
    return {
        'total_user_balance': 45000,
        'total_volume': 125000,
        'total_commission': 37500,
        'total_winnings': 87500,
        'total_duels': 1250,
        'house_duels': 850,
        'real_duels': 400,
        'house_percentage': 68.0,
        'avg_stake': 100,
        'total_users': 127,
        'active_users': 89,
        'new_users_week': 23,
        'avg_balance': 354,
        'games_per_day': 41.7,
        'volume_per_day': 4167,
        'commission_per_day': 1250
    }


@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    await admin_panel(callback.message)
