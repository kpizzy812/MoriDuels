"""
–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
"""
from decimal import Decimal
from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from database.models.user import User
from database.models.duel import Duel, DuelStatus
from database.models.transaction import Transaction, TransactionType, TransactionStatus
from database.connection import async_session
from services.game_service import game_service
from config.settings import ADMIN_IDS
from utils.logger import setup_logger
from sqlalchemy import text

router = Router()
logger = setup_logger(__name__)


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in ADMIN_IDS


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_admin_stats()

    admin_text = f"""üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}
üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_volume']:,.0f} MORI
üíº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {stats['total_commission']:,.0f} MORI

üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á:
üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users_24h']}
üéÆ –ò–≥—Ä: {stats['games_24h']}
üí∞ –û–±–æ—Ä–æ—Ç: {stats['volume_24h']:,.0f} MORI

üè† House –¥—É—ç–ª–∏:
‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_house_duels']}
üìä –í—Å–µ–≥–æ —Å—ã–≥—Ä–∞–Ω–æ: {stats['total_house_games']}"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
            InlineKeyboardButton(text="üéÆ –î—É—ç–ª–∏", callback_data="admin_duels")
        ],
        [
            InlineKeyboardButton(text="üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="admin_transactions"),
            InlineKeyboardButton(text="üè† House —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_house")
        ],
        [
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ]
    ])

    await message.answer(admin_text, reply_markup=keyboard)


@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await get_top_users(limit=10)

    users_text = "üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

    for i, user_data in enumerate(top_users, 1):
        username = user_data['username'] if user_data['username'] else f"User {user_data['telegram_id']}"
        users_text += f"{i}. @{username}\n"
        users_text += f"   üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:,.0f} MORI\n"
        users_text += f"   üéÆ –ò–≥—Ä: {user_data['total_games']} (üèÜ {user_data['wins']})\n"
        users_text += f"   üìà –ü—Ä–∏–±—ã–ª—å: {user_data['profit']:+,.0f} MORI\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_user_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(users_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_duels")
async def admin_duels(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É—ç–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏
    active_duels = await get_active_duels()

    duels_text = "üéÆ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏:\n\n"

    if not active_duels:
        duels_text += "üîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π"
    else:
        for duel in active_duels[:10]:
            player1_name = duel['player1_username'] if duel['player1_username'] else f"User {duel['player1_id']}"

            if duel['is_house_duel']:
                duels_text += f"ü§ñ –î—É—ç–ª—å #{duel['id']}\n"
                duels_text += f"   üë§ @{player1_name} vs {duel['house_account_name']}\n"
                duels_text += f"   üí∞ –°—Ç–∞–≤–∫–∞: {duel['stake']:,.0f} MORI\n\n"
            else:
                player2_name = duel['player2_username'] if duel['player2_username'] else f"User {duel['player2_id']}"
                duels_text += f"üë• –î—É—ç–ª—å #{duel['id']}\n"
                duels_text += f"   üë§ @{player1_name} vs @{player2_name}\n"
                duels_text += f"   üí∞ –°—Ç–∞–≤–∫–∞: {duel['stake']:,.0f} MORI\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† House –¥—É—ç–ª–∏", callback_data="admin_house_duels"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É—ç–ª–µ–π", callback_data="admin_duel_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(duels_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_house_duels")
async def admin_house_duels(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ House –¥—É—ç–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ house –¥—É—ç–ª–∏
    house_duels = await game_service.get_active_house_duels()

    if not house_duels:
        await callback.message.edit_text(
            "üè† House –¥—É—ç–ª–∏\n\nüîç –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π —Å –±–æ—Ç–∞–º–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_duels")]
            ])
        )
        await callback.answer()
        return

    duels_text = "üè† –ê–∫—Ç–∏–≤–Ω—ã–µ House –¥—É—ç–ª–∏:\n\n"
    keyboard_rows = []

    for duel in house_duels:
        player = await User.get_by_telegram_id(duel.player1_id)
        player_name = player.username if player and player.username else f"User {duel.player1_id}"

        duels_text += f"üéÆ –î—É—ç–ª—å #{duel.id}\n"
        duels_text += f"üë§ @{player_name} vs {duel.house_account_name}\n"
        duels_text += f"üí∞ –°—Ç–∞–≤–∫–∞: {duel.stake:,.0f} MORI\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_rows.append([
            InlineKeyboardButton(
                text=f"‚úÖ #{duel.id} –ò–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç",
                callback_data=f"house_win_{duel.id}_true"
            ),
            InlineKeyboardButton(
                text=f"‚ùå #{duel.id} –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç",
                callback_data=f"house_win_{duel.id}_false"
            )
        ])
        duels_text += "\n"

    keyboard_rows.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_duels")
    ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await callback.message.edit_text(duels_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("house_win_"))
async def admin_house_decision(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è House –¥—É—ç–ª–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        parts = callback.data.split("_")
        duel_id = int(parts[2])
        player_wins = parts[3] == "true"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—Ä–æ—Å–æ–∫ –º–æ–Ω–µ—Ç—ã —Å –∞–¥–º–∏–Ω—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏–µ–º
        result = await game_service.flip_coin(duel_id, admin_decision=player_wins)

        if "error" in result:
            await callback.answer(f"‚ùå {result['error']}", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        outcome = "–ø–æ–±–µ–∂–¥–∞–µ—Ç" if player_wins else "–ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç"
        coin_result = "–û–†–ï–õ" if result["coin_result"] == "heads" else "–†–ï–®–ö–ê"

        await callback.answer(
            f"‚úÖ –î—É—ç–ª—å #{duel_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ò–≥—Ä–æ–∫ {outcome}\n–í—ã–ø–∞–ª: {coin_result}",
            show_alert=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—É—ç–ª–µ–π
        await admin_house_duels(callback)

        logger.info(f"‚úÖ Admin decision for duel {duel_id}: player_wins={player_wins}")

    except Exception as e:
        logger.error(f"‚ùå Error in admin house decision: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "admin_transactions")
async def admin_transactions(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    recent_transactions = await get_recent_transactions(limit=10)
    pending_count = await get_pending_transactions_count()

    trans_text = f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n"
    trans_text += f"‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö: {pending_count}\n\n"

    if recent_transactions:
        trans_text += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
        for tx in recent_transactions:
            username = tx['username'] if tx['username'] else f"User {tx['user_id']}"

            status_emoji = {
                "completed": "‚úÖ",
                "pending": "‚è≥",
                "failed": "‚ùå",
                "cancelled": "üö´"
            }.get(tx['status'], "‚ùì")

            type_names = {
                "deposit": "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                "withdrawal": "üí∏ –í—ã–≤–æ–¥",
                "duel_stake": "üéÆ –°—Ç–∞–≤–∫–∞",
                "duel_win": "üèÜ –í—ã–∏–≥—Ä—ã—à",
                "commission": "üíº –ö–æ–º–∏—Å—Å–∏—è"
            }
            type_name = type_names.get(tx['type'], tx['type'])

            trans_text += f"{status_emoji} {type_name}\n"
            trans_text += f"   üë§ @{username}\n"
            trans_text += f"   üí∞ {tx['amount']:+,.2f} MORI\n"
            trans_text += f"   üìÖ {tx['created_at'].strftime('%d.%m %H:%M')}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="admin_pending_tx"),
            InlineKeyboardButton(text="‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ", callback_data="admin_failed_tx")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_tx_stats")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(trans_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_detailed_stats")
async def admin_detailed_stats(callback: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    stats = await get_detailed_stats()

    stats_text = f"""üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_user_balance']:,.0f} MORI
‚Ä¢ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: {stats['total_volume']:,.0f} MORI
‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∏—Å—Å–∏–π: {stats['total_commission']:,.0f} MORI
‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: {stats['total_winnings']:,.0f} MORI

üéÆ –ò–≥—Ä—ã:
‚Ä¢ –í—Å–µ–≥–æ –¥—É—ç–ª–µ–π: {stats['total_duels']}
‚Ä¢ House –¥—É—ç–ª–µ–π: {stats['house_duels']} ({stats['house_percentage']:.1f}%)
‚Ä¢ –†–µ–∞–ª—å–Ω—ã—Ö –¥—É—ç–ª–µ–π: {stats['real_duels']} ({100 - stats['house_percentage']:.1f}%)
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {stats['avg_stake']:,.0f} MORI

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (–∏–≥—Ä–∞–ª–∏): {stats['active_users']}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_users_week']}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: {stats['avg_balance']:,.0f} MORI

üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –ò–≥—Ä –≤ –¥–µ–Ω—å: {stats['games_per_day']:.1f}
‚Ä¢ –û–±–æ—Ä–æ—Ç –≤ –¥–µ–Ω—å: {stats['volume_per_day']:,.0f} MORI
‚Ä¢ –ö–æ–º–∏—Å—Å–∏–π –≤ –¥–µ–Ω—å: {stats['commission_per_day']:,.0f} MORI"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="admin_activity_chart"),
            InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_financial_report")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


# –†–ï–ê–õ–¨–ù–´–ï —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
async def get_admin_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    async with async_session() as session:
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result = await session.execute(text("""
                SELECT 
                    (SELECT COUNT(*) FROM users) as users_count,
                    (SELECT COUNT(*) FROM duels WHERE status = 'finished') as total_games,
                    (SELECT COALESCE(SUM(stake * 2), 0) FROM duels WHERE status = 'finished') as total_volume,
                    (SELECT COALESCE(SUM(house_commission), 0) FROM duels WHERE status = 'finished') as total_commission,
                    (SELECT COUNT(*) FROM users WHERE created_at >= NOW() - INTERVAL '24 hours') as new_users_24h,
                    (SELECT COUNT(*) FROM duels WHERE status = 'finished' AND finished_at >= NOW() - INTERVAL '24 hours') as games_24h,
                    (SELECT COALESCE(SUM(stake * 2), 0) FROM duels WHERE status = 'finished' AND finished_at >= NOW() - INTERVAL '24 hours') as volume_24h,
                    (SELECT COUNT(*) FROM duels WHERE status = 'active' AND is_house_duel = true) as active_house_duels,
                    (SELECT COUNT(*) FROM duels WHERE status = 'finished' AND is_house_duel = true) as total_house_games
            """))

            stats = result.fetchone()
            return {
                'users_count': stats.users_count,
                'total_games': stats.total_games,
                'total_volume': float(stats.total_volume),
                'total_commission': float(stats.total_commission),
                'new_users_24h': stats.new_users_24h,
                'games_24h': stats.games_24h,
                'volume_24h': float(stats.volume_24h),
                'active_house_duels': stats.active_house_duels,
                'total_house_games': stats.total_house_games
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting admin stats: {e}")
            return {'users_count': 0, 'total_games': 0, 'total_volume': 0, 'total_commission': 0,
                   'new_users_24h': 0, 'games_24h': 0, 'volume_24h': 0, 'active_house_duels': 0, 'total_house_games': 0}


async def get_top_users(limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with async_session() as session:
        try:
            result = await session.execute(text("""
                SELECT 
                    telegram_id, username, balance, total_games, wins,
                    (total_won - total_wagered) as profit
                FROM users 
                WHERE total_games > 0
                ORDER BY profit DESC, total_games DESC
                LIMIT :limit
            """), {"limit": limit})

            return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå Error getting top users: {e}")
            return []


async def get_active_duels() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏"""
    async with async_session() as session:
        try:
            result = await session.execute(text("""
                SELECT 
                    d.id, d.stake, d.is_house_duel, d.house_account_name,
                    d.player1_id, d.player2_id,
                    u1.username as player1_username,
                    u2.username as player2_username
                FROM duels d
                LEFT JOIN users u1 ON d.player1_id = u1.telegram_id
                LEFT JOIN users u2 ON d.player2_id = u2.telegram_id
                WHERE d.status = 'active'
                ORDER BY d.created_at DESC
            """))

            return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå Error getting active duels: {e}")
            return []


async def get_recent_transactions(limit: int = 10) -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    async with async_session() as session:
        try:
            result = await session.execute(text("""
                SELECT 
                    t.type, t.amount, t.status, t.created_at,
                    u.username, u.telegram_id as user_id
                FROM transactions t
                LEFT JOIN users u ON t.user_id = u.id
                ORDER BY t.created_at DESC
                LIMIT :limit
            """), {"limit": limit})

            return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå Error getting recent transactions: {e}")
            return []


async def get_pending_transactions_count() -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    async with async_session() as session:
        try:
            result = await session.execute(text("""
                SELECT COUNT(*) FROM transactions WHERE status = 'pending'
            """))
            return result.scalar()
        except Exception as e:
            logger.error(f"‚ùå Error getting pending transactions count: {e}")
            return 0


async def get_detailed_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with async_session() as session:
        try:
            result = await session.execute(text("""
                SELECT 
                    (SELECT COALESCE(SUM(balance), 0) FROM users) as total_user_balance,
                    (SELECT COALESCE(SUM(stake * 2), 0) FROM duels WHERE status = 'finished') as total_volume,
                    (SELECT COALESCE(SUM(house_commission), 0) FROM duels WHERE status = 'finished') as total_commission,
                    (SELECT COALESCE(SUM(winner_amount), 0) FROM duels WHERE status = 'finished' AND winner_amount IS NOT NULL) as total_winnings,
                    (SELECT COUNT(*) FROM duels WHERE status = 'finished') as total_duels,
                    (SELECT COUNT(*) FROM duels WHERE status = 'finished' AND is_house_duel = true) as house_duels,
                    (SELECT COUNT(*) FROM duels WHERE status = 'finished' AND is_house_duel = false) as real_duels,
                    (SELECT COALESCE(AVG(stake), 0) FROM duels WHERE status = 'finished') as avg_stake,
                    (SELECT COUNT(*) FROM users) as total_users,
                    (SELECT COUNT(*) FROM users WHERE total_games > 0) as active_users,
                    (SELECT COUNT(*) FROM users WHERE created_at >= NOW() - INTERVAL '7 days') as new_users_week,
                    (SELECT COALESCE(AVG(balance), 0) FROM users) as avg_balance
            """))

            stats = result.fetchone()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            house_percentage = (stats.house_duels / max(stats.total_duels, 1)) * 100
            games_per_day = stats.total_duels / max(1, 30)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            volume_per_day = float(stats.total_volume) / max(1, 30)
            commission_per_day = float(stats.total_commission) / max(1, 30)

            return {
                'total_user_balance': float(stats.total_user_balance),
                'total_volume': float(stats.total_volume),
                'total_commission': float(stats.total_commission),
                'total_winnings': float(stats.total_winnings),
                'total_duels': stats.total_duels,
                'house_duels': stats.house_duels,
                'real_duels': stats.real_duels,
                'house_percentage': house_percentage,
                'avg_stake': float(stats.avg_stake),
                'total_users': stats.total_users,
                'active_users': stats.active_users,
                'new_users_week': stats.new_users_week,
                'avg_balance': float(stats.avg_balance),
                'games_per_day': games_per_day,
                'volume_per_day': volume_per_day,
                'commission_per_day': commission_per_day
            }
        except Exception as e:
            logger.error(f"‚ùå Error getting detailed stats: {e}")
            return {'total_user_balance': 0, 'total_volume': 0, 'total_commission': 0, 'total_winnings': 0,
                   'total_duels': 0, 'house_duels': 0, 'real_duels': 0, 'house_percentage': 0, 'avg_stake': 0,
                   'total_users': 0, 'active_users': 0, 'new_users_week': 0, 'avg_balance': 0,
                   'games_per_day': 0, 'volume_per_day': 0, 'commission_per_day': 0}


@router.callback_query(F.data == "admin_settings")
async def admin_settings(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    from services.deposit_monitor import deposit_monitor
    monitor_stats = await deposit_monitor.get_monitoring_stats()

    settings_text = f"""‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {"üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if monitor_stats.get("monitoring") else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è TX: {monitor_stats.get("last_signature", "–ù–µ—Ç")}
‚Ä¢ –ö–µ—à: {monitor_stats.get("processed_cache_size", 0)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

üìä –î–µ–ø–æ–∑–∏—Ç—ã –∑–∞ 24—á:
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {monitor_stats.get("deposits_24h", {}).get("count", 0)}
‚Ä¢ –°—É–º–º–∞: {monitor_stats.get("deposits_24h", {}).get("sum", 0):,.0f} MORI

üí∞ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ: {monitor_stats.get("deposits_total", {}).get("count", 0)}
‚Ä¢ –°—É–º–º–∞: {monitor_stats.get("deposits_total", {}).get("sum", 0):,.0f} MORI
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö: {monitor_stats.get("deposits_total", {}).get("pending", 0)}

üîß –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: v1.0.0"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", callback_data="admin_force_check"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Solana", callback_data="admin_solana_stats")
        ],
        [
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞ expired rooms", callback_data="admin_cleanup_rooms")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")
        ]
    ])

    await callback.message.edit_text(settings_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "admin_force_check")
async def admin_force_check(callback: CallbackQuery):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    await callback.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...", show_alert=True)

    try:
        from services.deposit_monitor import deposit_monitor
        result = await deposit_monitor.force_check_deposits()

        if result.get("success"):
            await callback.message.edit_text(
                "‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "–í—Å–µ –Ω–æ–≤—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ])
            )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
                ])
            )

    except Exception as e:
        logger.error(f"‚ùå Error in force check: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
            ])
        )


@router.callback_query(F.data == "admin_cleanup_rooms")
async def admin_cleanup_rooms(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–º–Ω–∞—Ç"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        from database.models.room import Room
        cleaned_count = await Room.cleanup_expired_rooms()

        await callback.answer(f"üßπ –û—á–∏—â–µ–Ω–æ –∫–æ–º–Ω–∞—Ç: {cleaned_count}", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå Error cleaning rooms: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–º–Ω–∞—Ç", show_alert=True)


@router.callback_query(F.data == "admin_solana_stats")
async def admin_solana_stats(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Solana"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        from services.solana_service import solana_service

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
        bot_sol_balance = await solana_service.get_sol_balance(BOT_WALLET_ADDRESS)
        bot_mori_balance = await solana_service.get_token_balance(BOT_WALLET_ADDRESS, MORI_TOKEN_MINT)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å MORI mint
        mint_info = await solana_service.validate_token_mint_info(MORI_TOKEN_MINT)

        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Solana

ü§ñ –ö–æ—à–µ–ª–µ–∫ –±–æ—Ç–∞:
‚Ä¢ –ê–¥—Ä–µ—Å: {BOT_WALLET_ADDRESS[:8]}...{BOT_WALLET_ADDRESS[-4:]}
‚Ä¢ SOL –±–∞–ª–∞–Ω—Å: {bot_sol_balance or 0:.4f} SOL
‚Ä¢ MORI –±–∞–ª–∞–Ω—Å: {bot_mori_balance or 0:,.2f} MORI

ü™ô MORI —Ç–æ–∫–µ–Ω:
‚Ä¢ Mint: {MORI_TOKEN_MINT[:8]}...{MORI_TOKEN_MINT[-4:]}
‚Ä¢ –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {"‚úÖ –í–∞–ª–∏–¥–µ–Ω" if mint_info.get("valid") else "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω"}"""

        if mint_info.get("valid"):
            stats_text += f"""
‚Ä¢ Decimals: {mint_info.get("decimals", "N/A")}
‚Ä¢ Supply: {mint_info.get("supply_ui", 0):,.0f} MORI"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
        ])

        await callback.message.edit_text(stats_text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå Error getting Solana stats: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Solana: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]
            ])
        )

    await callback.answer()


@router.callback_query(F.data == "admin_search_user")
async def admin_search_user(callback: CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await callback.message.edit_text(
        """üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... 
–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.

–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ Telegram ID
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ username  
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "admin_pending_tx")
async def admin_pending_transactions(callback: CallbackQuery):
    """–û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        pending_txs = await get_pending_transactions_details()

        if not pending_txs:
            await callback.message.edit_text(
                "üí∞ –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n\n‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_transactions")]
                ])
            )
            await callback.answer()
            return

        pending_text = f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ({len(pending_txs)}):\n\n"

        for tx in pending_txs[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            username = tx['username'] if tx['username'] else f"User {tx['user_id']}"

            type_names = {
                "deposit": "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                "withdrawal": "üí∏ –í—ã–≤–æ–¥",
                "duel_stake": "üéÆ –°—Ç–∞–≤–∫–∞",
                "duel_win": "üèÜ –í—ã–∏–≥—Ä—ã—à"
            }
            type_name = type_names.get(tx['type'], tx['type'])

            pending_text += f"#{tx['id']} {type_name}\n"
            pending_text += f"   üë§ @{username}\n"
            pending_text += f"   üí∞ {tx['amount']:,.2f} MORI\n"
            pending_text += f"   üìÖ {tx['created_at'].strftime('%d.%m %H:%M')}\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_pending_tx")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_transactions")]
        ])

        await callback.message.edit_text(pending_text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"‚ùå Error getting pending transactions: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_transactions")]
            ])
        )

    await callback.answer()


async def get_pending_transactions_details() -> list:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    async with async_session() as session:
        try:
            result = await session.execute(text("""
                SELECT 
                    t.id, t.type, t.amount, t.created_at,
                    u.username, u.telegram_id as user_id
                FROM transactions t
                LEFT JOIN users u ON t.user_id = u.id
                WHERE t.status = 'pending'
                ORDER BY t.created_at DESC
                LIMIT 20
            """))

            return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå Error getting pending transaction details: {e}")
            return []


@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    await admin_panel(callback.message)