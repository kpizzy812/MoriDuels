"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º
"""
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.models.user import User
from database.models.wallet_history import WalletHistory
from services.solana_service import validate_solana_address
from bots.keyboards.main_menu import get_main_menu
from utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


class WalletStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    waiting_for_address = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    waiting_for_new_address = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ


@router.callback_query(F.data == "wallet")
async def wallet_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–º"""
    user_id = callback.from_user.id

    try:
        user = await User.get_by_telegram_id(user_id)

        if not user:
            await callback.message.edit_text(
                """‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updated_date = user.wallet_updated_at.strftime('%d.%m.%Y %H:%M')

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="change_wallet"),
                InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data="copy_wallet")
            ],
            [
                InlineKeyboardButton(text="üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="wallet_history")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
        await callback.message.edit_text(
            f"""üëõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º

üí≥ –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å:
`{user.wallet_address}`

üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_date}

‚ÑπÔ∏è –ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è:
‚Ä¢ –í—ã–∏–≥—Ä—ã—à–∏ –≤ –¥—É—ç–ª—è—Ö  
‚Ä¢ –í—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–≥—Ä""",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå Error in wallet_menu: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞", show_alert=True)


@router.callback_query(F.data == "copy_wallet")
async def copy_wallet_address(callback: CallbackQuery):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞"""
    user_id = callback.from_user.id

    try:
        user = await User.get_by_telegram_id(user_id)

        if user:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await callback.answer(
                f"üìã –ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω:\n{user.wallet_address}",
                show_alert=True
            )
            logger.info(f"‚úÖ User {user_id} copied wallet address")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå Error copying wallet address: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞", show_alert=True)


@router.callback_query(F.data == "change_wallet")
async def change_wallet_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –∫–æ—à–µ–ª—å–∫–∞
        warning_text = """üîÑ –°–º–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! 
–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–¥—Ä–µ—Å–∞:
‚Ä¢ –í—Å–µ –±—É–¥—É—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ–π–¥—É—Ç –Ω–∞ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
‚Ä¢ –í—ã–≤–æ–¥—ã —Å—Ä–µ–¥—Å—Ç–≤ –±—É–¥—É—Ç –Ω–∞ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
‚Ä¢ –°—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è

üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤–æ–º—É –∫–æ—à–µ–ª—å–∫—É

üëõ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å Solana –∫–æ—à–µ–ª—å–∫–∞:"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet")]
        ])

        await callback.message.edit_text(warning_text, reply_markup=keyboard)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        await state.set_state(WalletStates.waiting_for_new_address)
        await callback.answer()

        logger.info(f"‚úÖ User {callback.from_user.id} started wallet change process")

    except Exception as e:
        logger.error(f"‚ùå Error starting wallet change: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞", show_alert=True)


@router.message(WalletStates.waiting_for_new_address)
async def process_new_wallet_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ"""
    new_address = message.text.strip()
    user_id = message.from_user.id

    try:
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ Solana
        if not validate_solana_address(new_address):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet")]
            ])

            await message.answer(
                """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!

üìù –ê–¥—Ä–µ—Å Solana –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 32-44 —Å–∏–º–≤–æ–ª–∞
–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:
`9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM`

üëõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:""",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
        checking_msg = await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ Solana...")

        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ç–∏
        from services.solana_service import solana_service

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏
            sol_balance = await solana_service.get_sol_balance(new_address)

            if sol_balance is None:
                await checking_msg.edit_text(
                    """‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ—Ç–∏ Solana

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ö–æ—à–µ–ª–µ–∫ –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–Ω–µ –ø–æ–ª—É—á–∞–ª SOL)
‚Ä¢ –û—à–∏–±–∫–∞ –≤ –∞–¥—Ä–µ—Å–µ

–í—ã –≤—Å–µ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=f"confirm_wallet_{new_address}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet")
                        ]
                    ])
                )
                await state.clear()
                return

            elif sol_balance == 0:
                await checking_msg.edit_text(
                    f"""‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ –Ω–∞–π–¥–µ–Ω, –Ω–æ –±–∞–ª–∞–Ω—Å SOL: 0

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –≥–∞–∑–∞ (~0.001 SOL)

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ SOL –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º.

–ü—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫?""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=f"confirm_wallet_{new_address}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet")
                        ]
                    ])
                )
                await state.clear()
                return

            else:
                # –ö–æ—à–µ–ª–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç SOL - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
                await checking_msg.edit_text(
                    f"""‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω!

üí∞ SOL –±–∞–ª–∞–Ω—Å: {sol_balance:.4f} SOL
üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω

–ü—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫?""",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=f"confirm_wallet_{new_address}"),
                            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet")
                        ]
                    ])
                )
                await state.clear()
                return

        except Exception as e:
            logger.error(f"‚ùå Error checking wallet in network: {e}")
            await checking_msg.edit_text(
                """‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏

–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å RPC-—É–∑–ª–æ–º Solana.
–ê–¥—Ä–µ—Å –≤–∞–ª–∏–¥–µ–Ω, –Ω–æ —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

–ü—Ä–∏–≤—è–∑–∞—Ç—å —ç—Ç–æ—Ç –∫–æ—à–µ–ª–µ–∫?""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞, –ø—Ä–∏–≤—è–∑–∞—Ç—å", callback_data=f"confirm_wallet_{new_address}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="wallet")
                    ]
                ])
            )
            await state.clear()
            return

    except Exception as e:
        logger.error(f"‚ùå Error processing new wallet address: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")]
            ])
        )
        await state.clear()


@router.callback_query(F.data.startswith("confirm_wallet_"))
async def confirm_wallet_change(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ callback_data
        new_address = callback.data.replace("confirm_wallet_", "")
        user_id = callback.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.get_by_telegram_id(user_id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await callback.answer()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ –∞–¥—Ä–µ—Å
        if user.wallet_address.lower() == new_address.lower():
            await callback.message.edit_text(
                "‚ö†Ô∏è –≠—Ç–æ —Ç–æ—Ç –∂–µ –∞–¥—Ä–µ—Å, —á—Ç–æ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")]
                ])
            )
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        old_address = user.wallet_address

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await user.update_wallet(new_address)

        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üëõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º", callback_data="wallet")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

            await callback.message.edit_text(
                f"""‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!

üì§ –°—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å:
`{old_address[:16]}...{old_address[-8:]}`

üì• –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å:
`{new_address[:16]}...{new_address[-8:]}`

üí° –í—Å–µ –±—É–¥—É—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å""",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )

            logger.info(f"‚úÖ User {user_id} updated wallet from {old_address[:8]}... to {new_address[:8]}...")

        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")]
                ])
            )
            logger.error(f"‚ùå Failed to update wallet for user {user_id}")

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå Error confirming wallet change: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")]
            ])
        )
        await callback.answer()


@router.callback_query(F.data == "wallet_history")
async def show_wallet_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–æ–≤"""
    user_id = callback.from_user.id

    try:
        user = await User.get_by_telegram_id(user_id)

        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–æ–≤
        history = await WalletHistory.get_user_history(user.id, limit=10)

        if not history:
            text = """üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–∞

üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ—à–µ–ª—å–∫–∞.
–≠—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫."""
        else:
            text = "üìù –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–∞\n\n"

            for i, record in enumerate(history, 1):
                date_str = record.changed_at.strftime('%d.%m.%Y %H:%M')

                if record.old_address:
                    # –°–º–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞
                    text += f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ #{i}\n"
                    text += f"üìÖ {date_str}\n"
                    text += f"üì§ –°—Ç–∞—Ä—ã–π: {record.old_address[:12]}...{record.old_address[-6:]}\n"
                    text += f"üì• –ù–æ–≤—ã–π: {record.new_address[:12]}...{record.new_address[-6:]}\n\n"
                else:
                    # –ü–µ—Ä–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
                    text += f"üÜï –ü–µ—Ä–≤–∞—è –ø—Ä–∏–≤—è–∑–∫–∞\n"
                    text += f"üìÖ {date_str}\n"
                    text += f"üëõ –ê–¥—Ä–µ—Å: {record.new_address[:12]}...{record.new_address[-6:]}\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")]
        ])

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

        logger.info(f"‚úÖ Showed wallet history for user {user_id}")

    except Exception as e:
        logger.error(f"‚ùå Error showing wallet history: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)


@router.message(WalletStates.waiting_for_address)
async def process_first_wallet_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    wallet_address = message.text.strip()
    user_id = message.from_user.id
    username = message.from_user.username

    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ Solana
        if not validate_solana_address(wallet_address):
            await message.answer(
                """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞!

üìù –ê–¥—Ä–µ—Å Solana –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 32-44 —Å–∏–º–≤–æ–ª–∞
–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:
`9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM`

üëõ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:""",
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await User.get_by_telegram_id(user_id)
        if existing_user:
            await message.answer(
                "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await User.create_user(
            telegram_id=user_id,
            wallet_address=wallet_address,
            username=username
        )

        if not user:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
        data = await state.get_data()
        pending_room = data.get('pending_room')

        if pending_room and pending_room.startswith('room_'):
            room_code = pending_room.replace('room_', '')

            await message.answer(
                f"""‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!
üí≥ {wallet_address[:16]}...{wallet_address[-8:]}

üè† –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_code}..."""
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
            await handle_room_join_after_registration(message, user, room_code)

        else:
            # –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∫–æ–º–Ω–∞—Ç—ã
            await message.answer(
                f"""‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MORI Duels!

üëõ –ö–æ—à–µ–ª–µ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω:
`{wallet_address[:16]}...{wallet_address[-8:]}`

üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å MORI —Ç–æ–∫–µ–Ω–∞–º–∏
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –¥—É—ç–ª—è—Ö
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã

–ù–∞—á–Ω–µ–º –∏–≥—Ä–∞—Ç—å?""",
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )

        logger.info(f"‚úÖ New user registered: {user_id} with wallet {wallet_address[:8]}...")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå Error creating user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()


async def handle_room_join_after_registration(message: Message, user: User, room_code: str):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        from database.models.room import Room, RoomStatus

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
        room = await Room.get_by_code(room_code)

        if not room:
            await message.answer(
                f"""‚ùå –ö–æ–º–Ω–∞—Ç–∞ {room_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!

–í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.
–ù–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!""",
                reply_markup=get_main_menu()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã
        if room.status != RoomStatus.WAITING:
            status_messages = {
                RoomStatus.FULL: "—É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
                RoomStatus.EXPIRED: "–∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è",
                RoomStatus.CLOSED: "–±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º"
            }
            status_text = status_messages.get(room.status, "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

            await message.answer(
                f"""‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–Ω–∞—Ç–∞ {room_code} {status_text}!

–ù–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ú–æ–∂–µ—Ç–µ:""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")],
                    [InlineKeyboardButton(text="üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞", callback_data="quick_game")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∫–æ–º–Ω–∞—Ç–∞
        if room.is_expired():
            await room.expire_room()
            await message.answer(
                f"""‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ {room_code} –∏—Å—Ç–µ–∫–ª–æ!

–ù–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã:""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")],
                    [InlineKeyboardButton(text="üéÆ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞", callback_data="quick_game")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–∏ —ç—Ç–æ –∫–æ–º–Ω–∞—Ç—ã
        if room.creator_id == user.id:
            await message.answer(
                f"""‚ÑπÔ∏è –≠—Ç–æ –≤–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ {room_code}!

üí∞ –°—Ç–∞–≤–∫–∞: {room.stake:,.0f} MORI
‚è∞ –ñ–¥–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –∂–¥–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤!""",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data=f"close_room_{room_code}")],
                    [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")]
                ])
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        creator = await User.get_by_telegram_id(room.creator_id)
        creator_name = creator.username if creator and creator.username else f"Player {room.creator_id}"
        time_left = room.get_time_left()
        minutes_left = max(0, int(time_left.total_seconds() // 60))

        await message.answer(
            f"""üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ {room_code}

üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: @{creator_name}
üí∞ –°—Ç–∞–≤–∫–∞: {room.stake:,.0f} MORI
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {minutes_left} –º–∏–Ω

–•–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ?""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_room_{room_code}")],
                [InlineKeyboardButton(text="üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="rooms")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

        logger.info(f"‚úÖ Showed room {room_code} info to new user {user.id}")

    except Exception as e:
        logger.error(f"‚ùå Error handling room join after registration: {e}")
        await message.answer(
            f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–Ω–∞—Ç—ã {room_code}

–ù–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã:""",
            reply_markup=get_main_menu()
        )


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def get_user_wallet_summary(user: User) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–æ—à–µ–ª—å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ—à–µ–ª—å–∫–∞
        history_count = len(await WalletHistory.get_user_history(user.id))

        summary = f"""üëõ –ö–æ—à–µ–ª–µ–∫: `{user.wallet_address[:12]}...{user.wallet_address[-6:]}`
üìÖ –û–±–Ω–æ–≤–ª–µ–Ω: {user.wallet_updated_at.strftime('%d.%m.%Y')}"""

        if history_count > 1:
            summary += f"\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–π: {history_count - 1}"

        return summary

    except Exception as e:
        logger.error(f"‚ùå Error getting wallet summary: {e}")
        return f"üëõ –ö–æ—à–µ–ª–µ–∫: `{user.wallet_address[:12]}...{user.wallet_address[-6:]}`"


async def validate_wallet_not_in_use(wallet_address: str, exclude_user_id: int = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True (—Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±—ã–µ –∫–æ—à–µ–ª—å–∫–∏)
        return True

    except Exception as e:
        logger.error(f"‚ùå Error validating wallet uniqueness: {e}")
        return True