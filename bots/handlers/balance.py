"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
"""
from decimal import Decimal

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.models.user import User
from database.models.transaction import Transaction, TransactionType, TransactionStatus
from services.solana_service import solana_service
from bots.keyboards.main_menu import get_main_menu
from config.settings import BOT_WALLET_ADDRESS, WITHDRAWAL_COMMISSION
from utils.logger import setup_logger

router = Router()
logger = setup_logger(__name__)


class BalanceStates(StatesGroup):
    waiting_for_withdrawal_amount = State()


@router.callback_query(F.data == "balance")
async def show_balance(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.message.edit_text(
            """‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await Transaction.get_user_transactions(user.id, limit=5)

    balance_text = f"""üìä –í–∞—à –±–∞–ª–∞–Ω—Å

üí∞ –î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:,.2f} MORI
üëõ –ö–æ—à–µ–ª–µ–∫: `{user.wallet_address[:8]}...{user.wallet_address[-4:]}`

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user.total_games}
üèÜ –ü–æ–±–µ–¥: {user.wins} ({user.get_win_rate():.1f}%)
üíé –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {user.get_profit():+,.2f} MORI"""

    if transactions:
        balance_text += "\n\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:"
        for tx in transactions[:3]:
            status_emoji = "‚úÖ" if tx.status == TransactionStatus.COMPLETED else "‚è≥"
            balance_text += f"\n{status_emoji} {tx.get_display_type()}: {tx.amount:+,.2f} MORI"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
            InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")
        ],
        [
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="transaction_history")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])

    await callback.message.edit_text(
        balance_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "deposit")
async def deposit_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    deposit_text = f"""üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

–û—Ç–ø—Ä–∞–≤—å—Ç–µ MORI —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å:
`{BOT_WALLET_ADDRESS}`

üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à Solana –∫–æ—à–µ–ª–µ–∫
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ MORI —Ç–æ–∫–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
3. –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã

‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 MORI
üí≥ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏: ~0.00025 SOL"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data="copy_deposit_address")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="deposit_help")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance")
        ]
    ])

    await callback.message.edit_text(
        deposit_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "copy_deposit_address")
async def copy_deposit_address(callback: CallbackQuery):
    """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞"""
    await callback.answer(
        f"üìã –ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {BOT_WALLET_ADDRESS}",
        show_alert=True
    )


@router.callback_query(F.data == "deposit_help")
async def deposit_help(callback: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é"""
    help_text = """‚ùì –ü–æ–º–æ—â—å –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é

üîç –ö–∞–∫ –Ω–∞–π—Ç–∏ MORI —Ç–æ–∫–µ–Ω:
‚Ä¢ –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: `{}`
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: "MORI"

üí∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:
‚Ä¢ Phantom Wallet
‚Ä¢ Solflare
‚Ä¢ Trust Wallet

‚è∞ –í—Ä–µ–º—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:
‚Ä¢ –û–±—ã—á–Ω–æ: 1-2 –º–∏–Ω—É—Ç—ã
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 10 –º–∏–Ω—É—Ç

‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º?
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support""".format(solana_service.mori_mint or "—Ç–æ–∫–µ–Ω_–Ω–µ_–Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="deposit")]
    ])

    await callback.message.edit_text(
        help_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "withdraw")
async def withdraw_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    if user.balance <= 0:
        await callback.message.edit_text(
            """üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!

üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 0 MORI
üí≥ –ú–∏–Ω–∏–º—É–º –¥–ª—è –≤—ã–≤–æ–¥–∞: 10 MORI""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance")]
            ])
        )
        await callback.answer()
        return

    commission_amount = user.balance * Decimal(WITHDRAWAL_COMMISSION)
    net_amount = user.balance - commission_amount

    withdraw_text = f"""üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üìä –î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:,.2f} MORI
üí≥ –ö–æ–º–∏—Å—Å–∏—è ({WITHDRAWAL_COMMISSION * 100:.0f}%): {commission_amount:,.2f} MORI
üì§ –ö –≤—ã–≤–æ–¥—É: {net_amount:,.2f} MORI

üëõ –ù–∞ –∫–æ—à–µ–ª–µ–∫: `{user.wallet_address[:8]}...{user.wallet_address[-4:]}`

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–¥–æ {user.balance:,.0f} MORI):"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíØ –í—ã–≤–µ—Å—Ç–∏ –≤—Å—ë", callback_data=f"withdraw_all_{user.balance}"),
        ],
        [
            InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="balance")
        ]
    ])

    await callback.message.edit_text(
        withdraw_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã
    from bots.main_bot import dp
    state = dp.fsm.get_context(bot=callback.bot, chat_id=callback.message.chat.id, user_id=user_id)
    await state.set_state(BalanceStates.waiting_for_withdrawal_amount)
    await callback.answer()


@router.callback_query(F.data.startswith("withdraw_all_"))
async def withdraw_all(callback: CallbackQuery):
    """–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
    user_id = callback.from_user.id
    amount_str = callback.data.split("_")[2]

    try:
        amount = Decimal(amount_str)
        await process_withdrawal(callback, user_id, amount)
    except Exception as e:
        logger.error(f"‚ùå Error in withdraw_all: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)


@router.message(BalanceStates.waiting_for_withdrawal_amount)
async def process_withdrawal_amount(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞"""
    try:
        amount = Decimal(message.text.strip())

        if amount <= 0:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="withdraw")]
                ])
            )
            return

        user = await User.get_by_telegram_id(message.from_user.id)
        if not user or user.balance < amount:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance")]
                ])
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback
        class FakeCallback:
            def __init__(self, message):
                self.message = message
                self.from_user = message.from_user

            async def answer(self, text=None, show_alert=False):
                pass

        fake_callback = FakeCallback(message)
        await process_withdrawal(fake_callback, message.from_user.id, amount)

    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="withdraw")]
            ])
        )
    except Exception as e:
        logger.error(f"‚ùå Error processing withdrawal amount: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–º–º—ã")

    await state.clear()


async def process_withdrawal(callback, user_id: int, amount: Decimal):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        user = await User.get_by_telegram_id(user_id)
        if not user:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        if user.balance < amount:
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.balance:,.2f} MORI",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance")]
                ])
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        commission = amount * Decimal(WITHDRAWAL_COMMISSION)
        net_amount = amount - commission

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = f"""üí∏ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞

üí∞ –°—É–º–º–∞: {amount:,.2f} MORI
üí≥ –ö–æ–º–∏—Å—Å–∏—è: {commission:,.2f} MORI
üì§ –ö –≤—ã–≤–æ–¥—É: {net_amount:,.2f} MORI

üëõ –ù–∞ –∞–¥—Ä–µ—Å: `{user.wallet_address}`

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_withdraw_{amount}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="balance")
            ]
        ])

        await callback.message.edit_text(
            confirm_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"‚ùå Error in process_withdrawal: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞")


@router.callback_query(F.data.startswith("confirm_withdraw_"))
async def confirm_withdrawal(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥"""
    user_id = callback.from_user.id
    amount_str = callback.data.split("_")[2]

    try:
        amount = Decimal(amount_str)
        user = await User.get_by_telegram_id(user_id)

        if not user or user.balance < amount:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return

        # –°–Ω–∏–º–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞
        if not await user.subtract_balance(amount):
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!",
                reply_markup=get_main_menu()
            )
            await callback.answer()
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É
        commission = amount * Decimal(WITHDRAWAL_COMMISSION)
        net_amount = amount - commission

        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = await Transaction.create_transaction(
            user.id,
            TransactionType.WITHDRAWAL,
            net_amount,
            to_address=user.wallet_address,
            description=f"–í—ã–≤–æ–¥ {amount} MORI (–∫–æ–º–∏—Å—Å–∏—è {commission})"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await callback.message.edit_text(
            f"""‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞...

üí∞ –°—É–º–º–∞: {net_amount:,.2f} MORI
üëõ –ù–∞ –∫–æ—à–µ–ª–µ–∫: {user.wallet_address[:8]}...{user.wallet_address[-4:]}

üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏..."""
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
        tx_hash = await solana_service.send_token(
            user.wallet_address,
            net_amount,
            solana_service.mori_mint
        )

        if tx_hash and len(tx_hash) > 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ö–µ—à
            # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await transaction.complete_transaction(tx_hash)

            success_text = f"""‚úÖ –í—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!

        üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {net_amount:,.2f} MORI
        üí≥ –ö–æ–º–∏—Å—Å–∏—è: {commission:,.2f} MORI
        üîó TX: `{tx_hash[:16]}...`
        üëõ –ù–∞ –∫–æ—à–µ–ª–µ–∫: {user.wallet_address[:8]}...{user.wallet_address[-4:]}

        üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI

        ‚è∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–µ—Ç—å—é Solana
        –¢–æ–∫–µ–Ω—ã –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 –º–∏–Ω—É—Ç"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

        else:
            # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            await user.add_balance(amount)
            await transaction.fail_transaction("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å–µ—Ç—å Solana")

            success_text = f"""‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞!

        –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.
        üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI

        üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
        ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ –±–æ—Ç–∞ –¥–ª—è –≥–∞–∑–∞
        ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é Solana
        ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="withdraw")],
                [InlineKeyboardButton(text="üëõ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", callback_data="wallet")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])

        await callback.message.edit_text(
            success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"‚ùå Error confirming withdrawal: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤",
            reply_markup=get_main_menu()
        )

    await callback.answer()


@router.callback_query(F.data == "transaction_history")
async def show_transaction_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user_id = callback.from_user.id
    user = await User.get_by_telegram_id(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    transactions = await Transaction.get_user_transactions(user.id, limit=10)

    if not transactions:
        history_text = """üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."""
    else:
        history_text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n"

        for tx in transactions:
            date_str = tx.created_at.strftime('%d.%m %H:%M')
            status_emoji = {
                "completed": "‚úÖ",
                "pending": "‚è≥",
                "failed": "‚ùå",
                "cancelled": "üö´"
            }.get(tx.status.value, "‚ùì")

            history_text += f"{status_emoji} {tx.get_display_type()}\n"
            history_text += f"üí∞ {tx.amount:+,.2f} MORI\n"
            history_text += f"üìÖ {date_str}\n"
            if tx.tx_hash:
                history_text += f"üîó {tx.tx_hash[:12]}...\n"
            history_text += "\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance")]
    ])

    await callback.message.edit_text(
        history_text,
        reply_markup=keyboard
    )
    await callback.answer()