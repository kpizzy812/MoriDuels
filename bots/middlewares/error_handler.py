"""
Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram
"""
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Update
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest, TelegramRetryAfter
import asyncio
from utils.logger import setup_logger

logger = setup_logger(__name__)


class ErrorHandlerMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram"""

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        try:
            return await handler(event, data)

        except TelegramForbiddenError as e:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            if isinstance(event, Update) and event.message:
                user_id = event.message.from_user.id
                logger.warning(f"üö´ User {user_id} blocked the bot")
            elif isinstance(event, Update) and event.callback_query:
                user_id = event.callback_query.from_user.id
                logger.warning(f"üö´ User {user_id} blocked the bot")
            else:
                logger.warning(f"üö´ Bot was blocked by unknown user: {e}")

            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            return None

        except TelegramBadRequest as e:
            # –ü–ª–æ—Ö–æ–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
            logger.warning(f"‚ö†Ô∏è Bad request: {e}")
            return None

        except TelegramRetryAfter as e:
            # Rate limit - –∂–¥–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            logger.warning(f"‚è≥ Rate limit: waiting {e.retry_after} seconds")
            await asyncio.sleep(e.retry_after)
            return await handler(event, data)

        except Exception as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            logger.error(f"‚ùå Unexpected error in middleware: {e}")
            return None


class UserBlockedMiddleware(BaseMiddleware):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self):
        self.blocked_users = set()  # –ö–µ—à –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:

        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = None
        if isinstance(event, Update):
            if event.message:
                user_id = event.message.from_user.id
            elif event.callback_query:
                user_id = event.callback_query.from_user.id

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if user_id and user_id in self.blocked_users:
            logger.debug(f"üö´ Skipping update for blocked user {user_id}")
            return None

        try:
            return await handler(event, data)
        except TelegramForbiddenError:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if user_id:
                self.blocked_users.add(user_id)
                logger.info(f"üö´ Added user {user_id} to blocked list")
            raise  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ ErrorHandlerMiddleware