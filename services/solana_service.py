"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Solana –±–ª–æ–∫—á–µ–π–Ω–æ–º
"""
import asyncio
from decimal import Decimal
from typing import Optional, Dict, Any

from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.transaction import Transaction
from solders.system_program import TransferParams, transfer
from solana.rpc.async_api import AsyncClient
from solana.rpc.commitment import Confirmed
from solana.rpc.types import TxOpts

# SPL Token imports
from spl.token.instructions import (
    create_associated_token_account,
    get_associated_token_address,
    transfer_checked,
    TransferCheckedParams
)

from config.settings import SOLANA_RPC_URL, BOT_PRIVATE_KEY, BOT_WALLET_ADDRESS, MORI_TOKEN_MINT
from utils.logger import setup_logger

logger = setup_logger(__name__)


def validate_solana_address(address: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è Solana –∞–¥—Ä–µ—Å–∞"""
    try:
        if len(address) < 32 or len(address) > 44:
            return False
        Pubkey.from_string(address)
        return True
    except Exception:
        return False


class SolanaService:
    def __init__(self):
        self.client = AsyncClient(SOLANA_RPC_URL)
        self.bot_keypair = None
        self.bot_pubkey = None
        self.mori_mint = None
        self.token_decimals = 6  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ SPL —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç 6 decimals

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫ –±–æ—Ç–∞
        self._init_bot_wallet()

    def _init_bot_wallet(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ –±–æ—Ç–∞"""
        try:
            if BOT_PRIVATE_KEY:
                # –ü–∞—Ä—Å–∏–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç base58)
                import base58
                private_key_bytes = base58.b58decode(BOT_PRIVATE_KEY)
                # Solana –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 64-–±–∞–π—Ç–Ω—ã–µ –∫–ª—é—á–∏, –Ω–æ Keypair.from_bytes –æ–∂–∏–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 32 –±–∞–π—Ç–∞
                if len(private_key_bytes) == 64:
                    private_key_bytes = private_key_bytes[:32]
                elif len(private_key_bytes) != 32:
                    logger.error(f"‚ùå Invalid private key length: {len(private_key_bytes)}, expected 32 or 64 bytes")
                    return

                self.bot_keypair = Keypair.from_bytes(private_key_bytes)
                self.bot_pubkey = self.bot_keypair.pubkey()
                logger.info(f"‚úÖ Bot wallet initialized: {str(self.bot_pubkey)[:8]}...")

            if MORI_TOKEN_MINT:
                self.mori_mint = Pubkey.from_string(MORI_TOKEN_MINT)
                logger.info(f"‚úÖ MORI token mint: {str(self.mori_mint)[:8]}...")

        except Exception as e:
            logger.error(f"‚ùå Error initializing bot wallet: {e}")

    async def get_sol_balance(self, address: str) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å SOL"""
        try:
            pubkey = Pubkey.from_string(address)
            response = await self.client.get_balance(pubkey, commitment=Confirmed)

            if response.value is not None:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ lamports –≤ SOL
                sol_balance = Decimal(response.value) / Decimal(10 ** 9)
                return sol_balance
            return None

        except Exception as e:
            logger.error(f"‚ùå Error getting SOL balance for {address}: {e}")
            return None

    async def get_token_balance(self, address: str, token_mint: str = None) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞"""
        try:
            pubkey = Pubkey.from_string(address)
            mint_pubkey = Pubkey.from_string(token_mint or str(self.mori_mint))

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç—ã
            response = await self.client.get_token_accounts_by_owner(
                pubkey,
                {"mint": mint_pubkey},
                commitment=Confirmed
            )

            if response.value:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç
                token_account = response.value[0]
                account_pubkey = Pubkey.from_string(token_account.pubkey)

                # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
                balance_response = await self.client.get_token_account_balance(
                    account_pubkey,
                    commitment=Confirmed
                )

                if balance_response.value:
                    # –£—á–∏—Ç—ã–≤–∞–µ–º decimals —Ç–æ–∫–µ–Ω–∞
                    amount = balance_response.value.amount
                    decimals = balance_response.value.decimals
                    token_balance = Decimal(amount) / Decimal(10 ** decimals)
                    return token_balance

            return Decimal(0)

        except Exception as e:
            logger.error(f"‚ùå Error getting token balance for {address}: {e}")
            return None

    async def get_token_decimals(self, token_mint: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ decimals —Ç–æ–∫–µ–Ω–∞"""
        try:
            mint_pubkey = Pubkey.from_string(token_mint)
            response = await self.client.get_account_info(mint_pubkey)

            if response.value and response.value.data:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ mint –∞–∫–∫–∞—É–Ω—Ç–∞ (decimals –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 44)
                data = response.value.data
                if len(data) > 44:
                    decimals = data[44]
                    return decimals

            # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ 6 decimals
            return 6

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Could not get decimals for {token_mint}, using default 6: {e}")
            return 6

    async def send_sol(self, to_address: str, amount: Decimal) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å SOL"""
        try:
            if not self.bot_keypair:
                logger.error("‚ùå Bot keypair not initialized")
                return None

            to_pubkey = Pubkey.from_string(to_address)
            lamports = int(amount * Decimal(10 ** 9))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ lamports

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transfer_ix = transfer(
                TransferParams(
                    from_pubkey=self.bot_pubkey,
                    to_pubkey=to_pubkey,
                    lamports=lamports
                )
            )

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
            recent_blockhash = await self.client.get_latest_blockhash()

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction.new_with_payer(
                [transfer_ix],
                self.bot_pubkey
            )
            transaction.sign([self.bot_keypair], recent_blockhash.value.blockhash)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            result = await self.client.send_transaction(
                transaction,
                opts=TxOpts(skip_preflight=True)
            )

            if result.value:
                tx_hash = str(result.value)
                logger.info(f"‚úÖ SOL sent: {amount} to {to_address[:8]}... TX: {tx_hash[:8]}...")
                return tx_hash

            return None

        except Exception as e:
            logger.error(f"‚ùå Error sending SOL to {to_address}: {e}")
            return None

    async def send_token(self, to_address: str, amount: Decimal, token_mint: str = None) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å SPL —Ç–æ–∫–µ–Ω—ã"""
        try:
            if not self.bot_keypair:
                logger.error("‚ùå Bot keypair not initialized")
                return None

            mint_pubkey = Pubkey.from_string(token_mint or str(self.mori_mint))
            to_pubkey = Pubkey.from_string(to_address)

            # –ü–æ–ª—É—á–∞–µ–º decimals —Ç–æ–∫–µ–Ω–∞
            decimals = await self.get_token_decimals(str(mint_pubkey))

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º amount —Å —É—á–µ—Ç–æ–º decimals
            token_amount = int(amount * Decimal(10 ** decimals))

            # –ü–æ–ª—É—á–∞–µ–º Associated Token Accounts
            from_ata = get_associated_token_address(self.bot_pubkey, mint_pubkey)
            to_ata = get_associated_token_address(to_pubkey, mint_pubkey)

            instructions = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ATA –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            to_ata_info = await self.client.get_account_info(to_ata)
            if not to_ata_info.value:
                # –°–æ–∑–¥–∞–µ–º ATA –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                create_ata_ix = create_associated_token_account(
                    payer=self.bot_pubkey,
                    owner=to_pubkey,
                    mint=mint_pubkey
                )
                instructions.append(create_ata_ix)
                logger.info(f"üìù Creating ATA for {to_address[:8]}...")

            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é transfer
            transfer_ix = transfer_checked(
                TransferCheckedParams(
                    program_id=Pubkey.from_string("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"),  # SPL Token Program
                    source=from_ata,
                    mint=mint_pubkey,
                    dest=to_ata,
                    owner=self.bot_pubkey,
                    amount=token_amount,
                    decimals=decimals
                )
            )
            instructions.append(transfer_ix)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
            recent_blockhash = await self.client.get_latest_blockhash()

            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction.new_with_payer(
                instructions,
                self.bot_pubkey
            )
            transaction.sign([self.bot_keypair], recent_blockhash.value.blockhash)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            result = await self.client.send_transaction(
                transaction,
                opts=TxOpts(skip_preflight=False)  # –í–∫–ª—é—á–∞–µ–º preflight –¥–ª—è SPL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            )

            if result.value:
                tx_hash = str(result.value)
                logger.info(f"‚úÖ Sent {amount} tokens to {to_address[:8]}... TX: {tx_hash[:8]}...")
                return tx_hash

            logger.error("‚ùå Failed to send token transaction")
            return None

        except Exception as e:
            logger.error(f"‚ùå Error sending tokens to {to_address}: {e}")
            return None

    async def check_transaction(self, tx_hash: str) -> Optional[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            from solders.signature import Signature
            signature = Signature.from_string(tx_hash)

            response = await self.client.get_transaction(
                signature,
                commitment=Confirmed
            )

            if response.value:
                return {
                    "confirmed": True,
                    "slot": response.value.slot,
                    "block_time": response.value.block_time,
                    "fee": response.value.transaction.meta.fee if response.value.transaction.meta else 0
                }

            return {"confirmed": False}

        except Exception as e:
            logger.error(f"‚ùå Error checking transaction {tx_hash}: {e}")
            return None

    async def parse_token_transfer(self, tx_hash: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ SPL token transfer –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            from solders.signature import Signature
            signature = Signature.from_string(tx_hash)

            response = await self.client.get_transaction(
                signature,
                commitment=Confirmed
            )

            if not response.value or not response.value.transaction.meta:
                return None

            meta = response.value.transaction.meta

            # –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            pre_token_balances = meta.pre_token_balances or []
            post_token_balances = meta.post_token_balances or []

            for pre_balance in pre_token_balances:
                # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π post balance
                post_balance = None
                for pb in post_token_balances:
                    if pb.account_index == pre_balance.account_index:
                        post_balance = pb
                        break

                if post_balance and pre_balance.mint == str(self.mori_mint):
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    pre_amount = Decimal(pre_balance.ui_token_amount.amount)
                    post_amount = Decimal(post_balance.ui_token_amount.amount)

                    if post_amount > pre_amount:
                        # –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                        amount = (post_amount - pre_amount) / Decimal(10 ** post_balance.ui_token_amount.decimals)

                        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account_info = response.value.transaction.transaction.message.account_keys[pre_balance.account_index]

                        return {
                            "type": "deposit",
                            "amount": amount,
                            "token_mint": pre_balance.mint,
                            "account": str(account_info),
                            "decimals": post_balance.ui_token_amount.decimals
                        }

            return None

        except Exception as e:
            logger.error(f"‚ùå Error parsing token transfer {tx_hash}: {e}")
            return None

    async def monitor_address_for_deposits(self, address: str, callback_func) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
        try:
            pubkey = Pubkey.from_string(address)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            signatures_response = await self.client.get_signatures_for_address(
                pubkey,
                limit=1,
                commitment=Confirmed
            )

            last_signature = None
            if signatures_response.value:
                last_signature = signatures_response.value[0].signature

            logger.info(f"üîç Started monitoring {address[:8]}... for deposits")

            while True:
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏
                new_signatures_response = await self.client.get_signatures_for_address(
                    pubkey,
                    before=last_signature,
                    commitment=Confirmed
                )

                if new_signatures_response.value:
                    for sig_info in reversed(new_signatures_response.value):
                        # –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–∫–µ–Ω —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤
                        transfer_info = await self.parse_token_transfer(str(sig_info.signature))
                        if transfer_info:
                            await callback_func(address, str(sig_info.signature), transfer_info)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–¥–ø–∏—Å—å
                    last_signature = new_signatures_response.value[0].signature

        except Exception as e:
            logger.error(f"‚ùå Error monitoring address {address}: {e}")

    async def get_recent_token_transactions(self, address: str, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            pubkey = Pubkey.from_string(address)

            signatures_response = await self.client.get_signatures_for_address(
                pubkey,
                limit=limit,
                commitment=Confirmed
            )

            transactions = []
            if signatures_response.value:
                for sig_info in signatures_response.value:
                    transfer_info = await self.parse_token_transfer(str(sig_info.signature))
                    if transfer_info:
                        transactions.append({
                            "signature": str(sig_info.signature),
                            "block_time": sig_info.block_time,
                            **transfer_info
                        })

            return transactions

        except Exception as e:
            logger.error(f"‚ùå Error getting recent transactions for {address}: {e}")
            return []

    async def validate_token_mint_info(self, token_mint: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω mint"""
        try:
            mint_pubkey = Pubkey.from_string(token_mint)
            response = await self.client.get_account_info(mint_pubkey)

            if response.value and response.value.data:
                data = response.value.data

                # –ü–∞—Ä—Å–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ mint –∞–∫–∫–∞—É–Ω—Ç–∞
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: https://docs.rs/spl-token/latest/spl_token/state/struct.Mint.html
                if len(data) >= 82:
                    supply_bytes = data[36:44]
                    decimals = data[44]

                    supply = int.from_bytes(supply_bytes, 'little')

                    return {
                        "valid": True,
                        "supply": supply,
                        "decimals": decimals,
                        "supply_ui": supply / (10 ** decimals)
                    }

            return {"valid": False, "error": "Invalid mint account"}

        except Exception as e:
            logger.error(f"‚ùå Error validating token mint {token_mint}: {e}")
            return {"valid": False, "error": str(e)}

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        await self.client.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
solana_service = SolanaService()