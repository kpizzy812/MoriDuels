"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Jupiter API
"""
import asyncio
import aiohttp
from decimal import Decimal
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

from config.settings import JUPITER_API_KEY, MORI_TOKEN_MINT
from utils.logger import setup_logger

logger = setup_logger(__name__)


class JupiterService:
    def __init__(self):
        self.base_url = "https://price.jup.ag/v4"
        self.api_key = JUPITER_API_KEY
        self.cache = {}  # –ü—Ä–æ—Å—Ç–æ–π –∫–µ—à –¥–ª—è —Ü–µ–Ω
        self.cache_duration = timedelta(minutes=1)  # –ö–µ—à–∏—Ä—É–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É

    async def get_token_price(self, token_mint: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            cache_key = f"price_{token_mint}"
            if cache_key in self.cache:
                cached_data, cached_time = self.cache[cache_key]
                if datetime.utcnow() - cached_time < self.cache_duration:
                    return cached_data

            async with aiohttp.ClientSession() as session:
                headers = {}
                if self.api_key:
                    headers["Authorization"] = f"Bearer {self.api_key}"

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ USD
                url = f"{self.base_url}/price"
                params = {"ids": token_mint}

                async with session.get(url, headers=headers, params=params) as response:
                    if response.status == 200:
                        data = await response.json()

                        if "data" in data and token_mint in data["data"]:
                            price_data = data["data"][token_mint]

                            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤ SOL
                            sol_price_usd = await self._get_sol_price_usd(session, headers)

                            result = {
                                "price_usd": Decimal(str(price_data["price"])),
                                "price_sol": Decimal(
                                    str(price_data["price"])) / sol_price_usd if sol_price_usd else None,
                                "market_cap": price_data.get("marketCap"),
                                "volume_24h": price_data.get("volume24h"),
                                "timestamp": datetime.utcnow()
                            }

                            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            self.cache[cache_key] = (result, datetime.utcnow())

                            logger.info(f"‚úÖ Got price for {token_mint}: ${result['price_usd']}")
                            return result
                        else:
                            logger.warning(f"‚ö†Ô∏è No price data for token {token_mint}")
                            return None
                    else:
                        logger.error(f"‚ùå Jupiter API error: {response.status}")
                        return None

        except Exception as e:
            logger.error(f"‚ùå Error getting token price: {e}")
            return None

    async def _get_sol_price_usd(self, session: aiohttp.ClientSession, headers: dict) -> Optional[Decimal]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É SOL –≤ USD"""
        try:
            sol_mint = "So11111111111111111111111111111111111111112"  # Wrapped SOL

            url = f"{self.base_url}/price"
            params = {"ids": sol_mint}

            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()

                    if "data" in data and sol_mint in data["data"]:
                        sol_price = data["data"][sol_mint]["price"]
                        return Decimal(str(sol_price))

                return None

        except Exception as e:
            logger.error(f"‚ùå Error getting SOL price: {e}")
            return Decimal("100")  # Fallback —Ü–µ–Ω–∞ SOL

    async def get_mori_price(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É MORI —Ç–æ–∫–µ–Ω–∞"""
        if not MORI_TOKEN_MINT:
            logger.error("‚ùå MORI token mint not configured")
            return None

        return await self.get_token_price(MORI_TOKEN_MINT)

    async def get_token_info(self, token_mint: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ"""
        try:
            async with aiohttp.ClientSession() as session:
                headers = {}
                if self.api_key:
                    headers["Authorization"] = f"Bearer {self.api_key}"

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞
                url = f"https://api.solscan.io/token/meta"
                params = {"tokenAddress": token_mint}

                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {
                            "name": data.get("name"),
                            "symbol": data.get("symbol"),
                            "decimals": data.get("decimals"),
                            "supply": data.get("supply"),
                            "description": data.get("description")
                        }

                return None

        except Exception as e:
            logger.error(f"‚ùå Error getting token info: {e}")
            return None

    async def generate_price_chart(self, token_mint: str, period: str = "24h") -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π chart_service –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            from services.chart_service import chart_service

            chart_path = await chart_service.generate_candlestick_chart(
                token_mint=token_mint,
                period=period,
                style="dark_yellow"
            )

            if chart_path:
                logger.info(f"‚úÖ Generated price chart: {chart_path}")
                return chart_path
            else:
                logger.warning("‚ö†Ô∏è Failed to generate price chart")
                return None

        except Exception as e:
            logger.error(f"‚ùå Error generating price chart: {e}")
            return None

    async def get_market_data(self, token_mint: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            price_data = await self.get_token_price(token_mint)
            token_info = await self.get_token_info(token_mint)

            if price_data and token_info:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä—ã–Ω–æ—á–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é
                supply = token_info.get("supply", 0)
                price_usd = price_data["price_usd"]
                market_cap = float(supply) * float(price_usd) if supply else None

                return {
                    **price_data,
                    **token_info,
                    "calculated_market_cap": market_cap,
                    "trading_pair": f"{token_info.get('symbol', 'TOKEN')}/SOL"
                }

            return price_data

        except Exception as e:
            logger.error(f"‚ùå Error getting market data: {e}")
            return None

    def clear_cache(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à —Ü–µ–Ω"""
        self.cache.clear()
        logger.info("üóëÔ∏è Price cache cleared")

    def get_cache_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
        total_entries = len(self.cache)
        valid_entries = 0

        current_time = datetime.utcnow()
        for _, (_, cached_time) in self.cache.items():
            if current_time - cached_time < self.cache_duration:
                valid_entries += 1

        return {
            "total_entries": total_entries,
            "valid_entries": valid_entries,
            "expired_entries": total_entries - valid_entries
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
jupiter_service = JupiterService()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_mori_market_data() -> Optional[Dict[str, Any]]:
    """–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º MORI"""
    return await jupiter_service.get_mori_price()


async def format_price_message(price_data: Dict[str, Any], token_symbol: str = "MORI") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π —Ç–æ–∫–µ–Ω–∞"""
    if not price_data:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ {token_symbol}"

    price_usd = price_data["price_usd"]
    price_sol = price_data.get("price_sol")
    market_cap = price_data.get("market_cap") or price_data.get("calculated_market_cap")
    volume_24h = price_data.get("volume_24h")

    message = f"""ü™ô {token_symbol}/SOL

üí∞ –¶–µ–Ω–∞: ${price_usd:.6f}"""

    if price_sol:
        message += f" ({price_sol:.6f} SOL)"

    if market_cap:
        if market_cap >= 1_000_000:
            message += f"\nüìä MCAP: ${market_cap / 1_000_000:.1f}M"
        else:
            message += f"\nüìä MCAP: ${market_cap:,.0f}"

    if volume_24h:
        if volume_24h >= 1_000_000:
            message += f"\nüìà Volume 24h: ${volume_24h / 1_000_000:.1f}M"
        else:
            message += f"\nüìà Volume 24h: ${volume_24h:,.0f}"

    message += f"\nüîó Raydium: [Trade](https://raydium.io/swap/?inputCurrency=sol&outputCurrency={MORI_TOKEN_MINT})"

    return message