"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ü–µ–Ω
"""
import asyncio
import aiohttp
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Rectangle
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Optional, List, Dict
import os
from pathlib import Path

from config.settings import MORI_TOKEN_MINT
from utils.logger import setup_logger

logger = setup_logger(__name__)


class ChartService:
    def __init__(self):
        self.charts_dir = Path("static/charts")
        self.charts_dir.mkdir(parents=True, exist_ok=True)

        # –°—Ç–∏–ª–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.styles = {
            "dark_yellow": {
                "bg_color": "#0a0a0a",
                "grid_color": "#1a1a1a",
                "text_color": "#ffffff",
                "candle_up": "#ffeb3b",
                "candle_down": "#f44336",
                "volume_color": "#ffc107",
                "ma_color": "#ff9800"
            },
            "dark_green": {
                "bg_color": "#0d1421",
                "grid_color": "#1a2332",
                "text_color": "#ffffff",
                "candle_up": "#00e676",
                "candle_down": "#ff5252",
                "volume_color": "#4caf50",
                "ma_color": "#2196f3"
            }
        }

    async def generate_candlestick_chart(
            self,
            token_mint: str,
            period: str = "24h",
            style: str = "dark_yellow"
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫"""
        try:
            logger.info(f"üìä Generating candlestick chart for {token_mint}")

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            candle_data = await self._fetch_candle_data(token_mint, period)
            if not candle_data:
                logger.error("‚ùå No candle data received")
                return None

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_path = await self._create_candlestick_plot(candle_data, style, period)

            logger.info(f"‚úÖ Chart generated: {chart_path}")
            return chart_path

        except Exception as e:
            logger.error(f"‚ùå Error generating chart: {e}")
            return None

    async def _fetch_candle_data(self, token_mint: str, period: str) -> Optional[List[Dict]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
            period_params = self._get_period_params(period)
            if not period_params:
                return None

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Birdeye API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            url = "https://public-api.birdeye.so/defi/history_price"
            params = {
                "address": token_mint,
                "address_type": "token",
                "type": period_params["interval"],
                "time_from": period_params["from_timestamp"],
                "time_to": int(datetime.now().timestamp())
            }

            headers = {
                "X-API-KEY": os.getenv("BIRDEYE_API_KEY", "")  # –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
            }

            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()

                        if data.get("success") and data.get("data", {}).get("items"):
                            return data["data"]["items"]
                        else:
                            logger.warning("‚ö†Ô∏è No candlestick data in Birdeye response")
                            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                            return await self._generate_demo_data(period_params)
                    else:
                        logger.warning(f"‚ö†Ô∏è Birdeye API error: {response.status}")
                        return await self._generate_demo_data(period_params)

        except Exception as e:
            logger.error(f"‚ùå Error fetching candle data: {e}")
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            period_params = self._get_period_params(period)
            return await self._generate_demo_data(period_params) if period_params else None

    def _get_period_params(self, period: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞"""
        now = datetime.now()

        period_map = {
            "1h": {"interval": "1m", "from_timestamp": int((now - timedelta(hours=1)).timestamp())},
            "4h": {"interval": "5m", "from_timestamp": int((now - timedelta(hours=4)).timestamp())},
            "24h": {"interval": "15m", "from_timestamp": int((now - timedelta(hours=24)).timestamp())},
            "7d": {"interval": "1H", "from_timestamp": int((now - timedelta(days=7)).timestamp())},
            "30d": {"interval": "4H", "from_timestamp": int((now - timedelta(days=30)).timestamp())}
        }

        return period_map.get(period)

    async def _generate_demo_data(self, period_params: Dict) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            from_time = period_params["from_timestamp"]
            to_time = int(datetime.now().timestamp())
            interval_seconds = (to_time - from_time) // 96  # ~96 —Å–≤–µ—á–µ–π

            demo_data = []
            base_price = 0.00001234  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ MORI
            current_price = base_price

            for i in range(96):
                timestamp = from_time + (i * interval_seconds)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
                change_percent = np.random.normal(0, 2)  # –°—Ä–µ–¥–Ω–µ–µ 0%, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 2%
                price_change = current_price * (change_percent / 100)

                open_price = current_price
                close_price = current_price + price_change

                # High –∏ Low —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
                high_price = max(open_price, close_price) * (1 + abs(np.random.normal(0, 1)) / 100)
                low_price = min(open_price, close_price) * (1 - abs(np.random.normal(0, 1)) / 100)

                # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
                volume = np.random.randint(50000, 500000)

                demo_data.append({
                    "unixTime": timestamp,
                    "o": round(open_price, 8),
                    "h": round(high_price, 8),
                    "l": round(low_price, 8),
                    "c": round(close_price, 8),
                    "v": volume
                })

                current_price = close_price

            logger.info(f"‚úÖ Generated {len(demo_data)} demo candles")
            return demo_data

        except Exception as e:
            logger.error(f"‚ùå Error generating demo data: {e}")
            return []

    async def _create_candlestick_plot(self, data: List[Dict], style: str, period: str) -> str:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = pd.DataFrame(data)
            df['datetime'] = pd.to_datetime(df['unixTime'], unit='s')
            df = df.sort_values('datetime')

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å
            style_config = self.styles.get(style, self.styles["dark_yellow"])

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º matplotlib –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            plt.style.use('dark_background')

            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Å—É–±–ø–ª–æ—Ç–∞–º–∏
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8),
                                           gridspec_kw={'height_ratios': [3, 1]},
                                           facecolor=style_config["bg_color"])

            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ - —Å–≤–µ—á–∏
            await self._plot_candlesticks(ax1, df, style_config)

            # –ù–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ - –æ–±—ä–µ–º
            await self._plot_volume(ax2, df, style_config)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            await self._setup_chart_styling(ax1, ax2, df, style_config, period)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            timestamp = int(datetime.now().timestamp())
            filename = f"mori_chart_{period}_{timestamp}.png"
            chart_path = self.charts_dir / filename

            plt.tight_layout()
            plt.savefig(chart_path, dpi=300, bbox_inches='tight',
                        facecolor=style_config["bg_color"], edgecolor='none')
            plt.close()

            return str(chart_path)

        except Exception as e:
            logger.error(f"‚ùå Error creating plot: {e}")
            plt.close('all')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return None

    async def _plot_candlesticks(self, ax, df, style_config):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–≤–µ—á–∏"""
        try:
            for i, row in df.iterrows():
                x = mdates.date2num(row['datetime'])
                open_price, high, low, close = row['o'], row['h'], row['l'], row['c']

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å–≤–µ—á–∏
                color = style_config["candle_up"] if close >= open_price else style_config["candle_down"]

                # –†–∏—Å—É–µ–º —Ç–µ–ª–æ —Å–≤–µ—á–∏
                height = abs(close - open_price)
                bottom = min(open_price, close)
                width = 0.0003  # –®–∏—Ä–∏–Ω–∞ —Å–≤–µ—á–∏

                rect = Rectangle((x - width / 2, bottom), width, height,
                                 facecolor=color, edgecolor=color, alpha=0.8)
                ax.add_patch(rect)

                # –†–∏—Å—É–µ–º —Ç–µ–Ω–∏ (wicks)
                ax.plot([x, x], [low, high], color=color, linewidth=1, alpha=0.7)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â—É—é —Å—Ä–µ–¥–Ω—é—é
            if len(df) > 20:
                df['ma20'] = df['c'].rolling(window=20).mean()
                ax.plot(df['datetime'], df['ma20'], color=style_config["ma_color"],
                        linewidth=1.5, alpha=0.8, label='MA20')

        except Exception as e:
            logger.error(f"‚ùå Error plotting candlesticks: {e}")

    async def _plot_volume(self, ax, df, style_config):
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –æ–±—ä–µ–º"""
        try:
            colors = []
            for i, row in df.iterrows():
                if i == 0:
                    colors.append(style_config["volume_color"])
                else:
                    prev_close = df.iloc[i - 1]['c']
                    current_close = row['c']
                    color = style_config["candle_up"] if current_close >= prev_close else style_config["candle_down"]
                    colors.append(color)

            ax.bar(df['datetime'], df['v'], color=colors, alpha=0.6, width=0.8)

        except Exception as e:
            logger.error(f"‚ùå Error plotting volume: {e}")

    async def _setup_chart_styling(self, ax1, ax2, df, style_config, period):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            # –¶–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–º –≥—Ä–∞—Ñ–∏–∫–µ
            ax1.set_facecolor(style_config["bg_color"])
            ax1.grid(True, color=style_config["grid_color"], alpha=0.3)
            ax1.tick_params(colors=style_config["text_color"])

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–∏ X –¥–ª—è –¥–∞—Ç
            if period in ["1h", "4h"]:
                ax1.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                ax1.xaxis.set_major_locator(mdates.HourLocator(interval=1))
            elif period == "24h":
                ax1.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
                ax1.xaxis.set_major_locator(mdates.HourLocator(interval=4))
            else:
                ax1.xaxis.set_major_formatter(mdates.DateFormatter('%m/%d'))
                ax1.xaxis.set_major_locator(mdates.DayLocator(interval=1))

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–ø–∏—Å–∏
            current_price = df.iloc[-1]['c']
            price_change = ((current_price - df.iloc[0]['c']) / df.iloc[0]['c']) * 100
            change_color = style_config["candle_up"] if price_change >= 0 else style_config["candle_down"]

            title = f"MORI/SOL ‚Ä¢ ${current_price:.8f} ‚Ä¢ {price_change:+.2f}% ‚Ä¢ {period.upper()}"
            ax1.set_title(title, color=style_config["text_color"], fontsize=14, fontweight='bold', pad=20)
            ax1.set_ylabel('–¶–µ–Ω–∞ (USD)', color=style_config["text_color"], fontsize=10)

            # –û–±—ä–µ–º –Ω–∞ –Ω–∏–∂–Ω–µ–º –≥—Ä–∞—Ñ–∏–∫–µ
            ax2.set_facecolor(style_config["bg_color"])
            ax2.grid(True, color=style_config["grid_color"], alpha=0.3)
            ax2.tick_params(colors=style_config["text_color"])
            ax2.set_ylabel('–û–±—ä–µ–º', color=style_config["text_color"], fontsize=10)
            ax2.set_xlabel('–í—Ä–µ–º—è', color=style_config["text_color"], fontsize=10)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞
            ax2.yaxis.set_major_formatter(
                plt.FuncFormatter(lambda x, p: f'{x / 1000:.0f}K' if x >= 1000 else f'{x:.0f}'))

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –æ—Å–∏ X –≤–µ—Ä—Ö–Ω–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            ax1.set_xticklabels([])

            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç
            plt.setp(ax2.xaxis.get_majorticklabels(), rotation=45)

        except Exception as e:
            logger.error(f"‚ùå Error setting up chart styling: {e}")

    async def cleanup_old_charts(self, max_age_hours: int = 1):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        try:
            cutoff_time = datetime.now() - timedelta(hours=max_age_hours)
            deleted_count = 0

            for chart_file in self.charts_dir.glob("mori_chart_*.png"):
                if chart_file.stat().st_mtime < cutoff_time.timestamp():
                    chart_file.unlink()
                    deleted_count += 1

            if deleted_count > 0:
                logger.info(f"üóëÔ∏è Cleaned up {deleted_count} old chart files")

        except Exception as e:
            logger.error(f"‚ùå Error cleaning up charts: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
chart_service = ChartService()