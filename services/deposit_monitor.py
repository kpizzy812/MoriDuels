"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
"""
import asyncio
from decimal import Decimal
from typing import Dict, Any, Set, Optional
from datetime import datetime

from database.models.user import User
from database.models.transaction import Transaction, TransactionType
from database.connection import async_session
from services.solana_service import solana_service
from config.settings import BOT_WALLET_ADDRESS, MORI_TOKEN_MINT
from utils.logger import setup_logger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import text

logger = setup_logger(__name__)


class DepositMonitor:
    def __init__(self):
        self.monitoring = False
        self.last_processed_signature = None
        self.processed_signatures: Set[str] = set()  # –ö–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.check_interval = 30  # —Å–µ–∫—É–Ω–¥

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
        if self.monitoring:
            logger.warning("‚ö†Ô∏è Deposit monitoring already running")
            return

        self.monitoring = True
        logger.info("üîç Starting deposit monitoring...")

        try:
            await self._monitor_loop()
        except Exception as e:
            logger.error(f"‚ùå Error in deposit monitoring: {e}")
        finally:
            self.monitoring = False

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False
        logger.info("üõë Deposit monitoring stopped")

    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å –±–æ—Ç–∞
                await self._check_new_transactions()

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                await asyncio.sleep(self.check_interval)

            except Exception as e:
                logger.error(f"‚ùå Error in monitoring loop: {e}")
                await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _check_new_transactions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            if not BOT_WALLET_ADDRESS:
                logger.error("‚ùå Bot wallet address not configured")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å –±–æ—Ç–∞
            from solders.pubkey import Pubkey
            bot_pubkey = Pubkey.from_string(BOT_WALLET_ADDRESS)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            signatures_response = await solana_service.client.get_signatures_for_address(
                bot_pubkey,
                limit=20,
                before=self.last_processed_signature
            )

            if not signatures_response.value:
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            new_signatures = []
            for sig_info in signatures_response.value:
                signature = str(sig_info.signature)

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                if signature in self.processed_signatures:
                    continue

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è
                if signature == self.last_processed_signature:
                    break

                new_signatures.append((signature, sig_info))

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            for signature, sig_info in reversed(new_signatures):
                await self._process_transaction(signature, sig_info)
                self.processed_signatures.add(signature)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            if new_signatures:
                self.last_processed_signature = new_signatures[0][0]

            # –û—á–∏—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
            if len(self.processed_signatures) > 1000:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500
                self.processed_signatures = set(list(self.processed_signatures)[-500:])

        except Exception as e:
            logger.error(f"‚ùå Error checking new transactions: {e}")

    async def _process_transaction(self, signature: str, sig_info):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            if sig_info.err:
                logger.debug(f"‚ö†Ô∏è Skipping failed transaction {signature[:8]}...")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î
            if await self._is_transaction_processed(signature):
                logger.debug(f"‚ö†Ô∏è Transaction {signature[:8]}... already processed in DB")
                return

            # –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç MORI –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            transfer_info = await solana_service.parse_token_transfer(signature)

            if transfer_info and transfer_info.get("type") == "deposit":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ MORI —Ç–æ–∫–µ–Ω
                if transfer_info["token_mint"] == MORI_TOKEN_MINT:
                    await self._process_deposit(transfer_info, signature, sig_info.block_time)

        except Exception as e:
            logger.error(f"‚ùå Error processing transaction {signature}: {e}")

    async def _process_deposit(self, deposit_info: Dict[str, Any], tx_hash: str, block_time: int):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç"""
        try:
            amount = deposit_info["amount"]
            account_address = deposit_info["account"]

            logger.info(f"üí∞ Processing deposit: {amount} MORI to account {account_address[:8]}...")

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Associated Token Account
            user = await self._find_user_by_token_account(account_address)

            if not user:
                logger.warning(f"‚ö†Ô∏è No user found for token account {account_address}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞
            if amount < Decimal("1"):
                logger.warning(f"‚ö†Ô∏è Deposit amount too small: {amount} MORI")
                return

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
            transaction = await Transaction.create_transaction(
                user.id,
                TransactionType.DEPOSIT,
                amount,
                tx_hash=tx_hash,
                from_address=account_address,  # –≠—Ç–æ ATA, –Ω–µ wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                to_address=BOT_WALLET_ADDRESS,
                description=f"–î–µ–ø–æ–∑–∏—Ç {amount} MORI"
            )

            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
            if await user.add_balance(amount):
                await transaction.complete_transaction()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._notify_user_about_deposit(user, amount, tx_hash)

                logger.info(f"‚úÖ Deposit processed: {amount} MORI for user {user.telegram_id}")
            else:
                await transaction.fail_transaction("–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å")
                logger.error(f"‚ùå Failed to add balance for user {user.telegram_id}")

        except Exception as e:
            logger.error(f"‚ùå Error processing deposit: {e}")

    async def _find_user_by_token_account(self, token_account: str) -> Optional[User]:
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Associated Token Account"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
            from solders.pubkey import Pubkey
            account_pubkey = Pubkey.from_string(token_account)

            account_info = await solana_service.client.get_account_info(account_pubkey)
            if not account_info.value or not account_info.value.data:
                return None

            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å owner
            data = account_info.value.data
            if len(data) < 32:
                return None

            # Owner –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤—ã—Ö 32 –±–∞–π—Ç–∞—Ö —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
            owner_bytes = data[:32]
            owner_pubkey = Pubkey(owner_bytes)
            owner_address = str(owner_pubkey)

            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ wallet_address
            async with async_session() as session:
                result = await session.execute(
                    text("SELECT * FROM users WHERE wallet_address = :wallet_address"),
                    {"wallet_address": owner_address}
                )
                row = result.fetchone()
                if row:
                    user = User()
                    for key, value in row._mapping.items():
                        setattr(user, key, value)
                    return user

            return None

        except Exception as e:
            logger.error(f"‚ùå Error finding user by token account {token_account}: {e}")
            return None

    async def _is_transaction_processed(self, tx_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è"""
        try:
            async with async_session() as session:
                result = await session.execute(
                    text("SELECT COUNT(*) FROM transactions WHERE tx_hash = :tx_hash"),
                    {"tx_hash": tx_hash}
                )
                count = result.scalar()
                return count > 0

        except Exception as e:
            logger.error(f"‚ùå Error checking transaction {tx_hash}: {e}")
            return False

    async def _notify_user_about_deposit(self, user: User, amount: Decimal, tx_hash: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ"""
        try:
            from bots.main_bot import bot

            message = f"""‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω!

üí∞ –°—É–º–º–∞: {amount:,.2f} MORI
üîó TX: {tx_hash[:12]}...
üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI

–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üéÆ"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="quick_game")],
                [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
            ])

            await bot.send_message(
                user.telegram_id,
                message,
                reply_markup=keyboard
            )

            logger.info(f"üì± Notified user {user.telegram_id} about deposit")

        except Exception as e:
            logger.error(f"‚ùå Error notifying user about deposit: {e}")

    async def force_check_deposits(self, user_id: int = None) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)"""
        try:
            if user_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await User.get_by_telegram_id(user_id)
                if not user:
                    return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                recent_txs = await solana_service.get_recent_token_transactions(
                    user.wallet_address,
                    limit=5
                )

                processed_count = 0
                for tx_info in recent_txs:
                    if not await self._is_transaction_processed(tx_info["signature"]):
                        await self._process_transaction(tx_info["signature"], type('obj', (object,), {
                            'err': None,
                            'block_time': tx_info.get("block_time")
                        })())
                        processed_count += 1

                return {
                    "success": True,
                    "user_id": user_id,
                    "processed": processed_count,
                    "checked": len(recent_txs)
                }
            else:
                # –û–±—â–∞—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                await self._check_new_transactions()
                return {"success": True, "message": "Force check completed"}

        except Exception as e:
            logger.error(f"‚ùå Error in force check deposits: {e}")
            return {"error": str(e)}

    async def get_monitoring_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            async with async_session() as session:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á
                result = await session.execute(text("""
                    SELECT 
                        COUNT(*) as count_24h,
                        COALESCE(SUM(amount), 0) as sum_24h
                    FROM transactions 
                    WHERE type = 'deposit' 
                    AND status = 'completed'
                    AND created_at >= NOW() - INTERVAL '24 hours'
                """))
                stats_24h = result.fetchone()

                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
                result = await session.execute(text("""
                    SELECT 
                        COUNT(*) as total_count,
                        COALESCE(SUM(amount), 0) as total_sum,
                        COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count
                    FROM transactions 
                    WHERE type = 'deposit'
                """))
                total_stats = result.fetchone()

                return {
                    "monitoring": self.monitoring,
                    "last_signature": self.last_processed_signature[:8] + "..." if self.last_processed_signature else None,
                    "processed_cache_size": len(self.processed_signatures),
                    "deposits_24h": {
                        "count": stats_24h.count_24h,
                        "sum": float(stats_24h.sum_24h)
                    },
                    "deposits_total": {
                        "count": total_stats.total_count,
                        "sum": float(total_stats.total_sum),
                        "pending": total_stats.pending_count
                    }
                }

        except Exception as e:
            logger.error(f"‚ùå Error getting monitoring stats: {e}")
            return {"error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
deposit_monitor = DepositMonitor()


async def start_deposit_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ"""
    asyncio.create_task(deposit_monitor.start_monitoring())
    logger.info("üöÄ Deposit monitoring task started")


async def stop_deposit_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    await deposit_monitor.stop_monitoring()