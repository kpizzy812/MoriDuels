"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
"""
import asyncio
from decimal import Decimal
from typing import Dict, Any
from datetime import datetime

from database.models.user import User
from database.models.transaction import Transaction, TransactionType
from services.solana_service import solana_service
from config.settings import BOT_WALLET_ADDRESS, MORI_TOKEN_MINT
from utils.logger import setup_logger

logger = setup_logger(__name__)


class DepositMonitor:
    def __init__(self):
        self.monitoring = False
        self.last_processed_signature = None

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
        if self.monitoring:
            logger.warning("‚ö†Ô∏è Deposit monitoring already running")
            return

        self.monitoring = True
        logger.info("üîç Starting deposit monitoring...")

        try:
            await self._monitor_loop()
        except Exception as e:
            logger.error(f"‚ùå Error in deposit monitoring: {e}")
        finally:
            self.monitoring = False

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = False
        logger.info("üõë Deposit monitoring stopped")

    async def _monitor_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å –±–æ—Ç–∞
                await self._check_new_transactions()

                # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)

            except Exception as e:
                logger.error(f"‚ùå Error in monitoring loop: {e}")
                await asyncio.sleep(60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def _check_new_transactions(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            if not BOT_WALLET_ADDRESS:
                logger.error("‚ùå Bot wallet address not configured")
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∞–¥—Ä–µ—Å –±–æ—Ç–∞
            from solders.pubkey import Pubkey
            bot_pubkey = Pubkey.from_string(BOT_WALLET_ADDRESS)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            signatures_response = await solana_service.client.get_signatures_for_address(
                bot_pubkey,
                limit=10,
                before=self.last_processed_signature
            )

            if not signatures_response.value:
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            new_signatures = []
            for sig_info in signatures_response.value:
                signature = str(sig_info.signature)

                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                if signature == self.last_processed_signature:
                    break

                new_signatures.append(signature)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
            for signature in reversed(new_signatures):
                await self._process_transaction(signature)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            if new_signatures:
                self.last_processed_signature = new_signatures[0]

        except Exception as e:
            logger.error(f"‚ùå Error checking new transactions: {e}")

    async def _process_transaction(self, signature: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            tx_details = await solana_service.check_transaction(signature)

            if not tx_details or not tx_details.get("confirmed"):
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            from solders.signature import Signature
            sig = Signature.from_string(signature)

            response = await solana_service.client.get_transaction(
                sig,
                commitment=solana_service.client._commitment
            )

            if not response.value:
                return

            transaction = response.value.transaction

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ MORI —Ç–æ–∫–µ–Ω–æ–≤
            deposit_info = await self._analyze_transaction_for_deposit(transaction, signature)

            if deposit_info:
                await self._process_deposit(deposit_info, signature)

        except Exception as e:
            logger.error(f"‚ùå Error processing transaction {signature}: {e}")

    async def _analyze_transaction_for_deposit(self, transaction, signature: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–Ω–∞–ª–∏–∑ SPL token transfer'–æ–≤
            # –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Solana
            # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É

            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ:
            # 1. –ù–∞–π—Ç–∏ SPL Token Transfer –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–æ–∫–µ–Ω = MORI_TOKEN_MINT
            # 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å = BOT_WALLET_ADDRESS
            # 4. –ò–∑–≤–ª–µ—á—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ —Å—É–º–º—É

            logger.info(f"üîç Analyzing transaction {signature} for deposits...")

            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            return None

        except Exception as e:
            logger.error(f"‚ùå Error analyzing transaction: {e}")
            return None

    async def _process_deposit(self, deposit_info: Dict[str, Any], tx_hash: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç"""
        try:
            sender_address = deposit_info["sender"]
            amount = Decimal(str(deposit_info["amount"]))

            logger.info(f"üí∞ Processing deposit: {amount} MORI from {sender_address}")

            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞
            user = await self._find_user_by_wallet(sender_address)

            if not user:
                logger.warning(f"‚ö†Ô∏è No user found for wallet {sender_address}")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –¥–µ–ø–æ–∑–∏—Ç
            existing_tx = await self._check_existing_transaction(tx_hash)
            if existing_tx:
                logger.warning(f"‚ö†Ô∏è Transaction {tx_hash} already processed")
                return

            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–µ–ø–æ–∑–∏—Ç–∞
            transaction = await Transaction.create_transaction(
                user.id,
                TransactionType.DEPOSIT,
                amount,
                tx_hash=tx_hash,
                from_address=sender_address,
                to_address=BOT_WALLET_ADDRESS,
                description=f"–î–µ–ø–æ–∑–∏—Ç {amount} MORI"
            )

            # –ó–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
            if await user.add_balance(amount):
                await transaction.complete_transaction()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._notify_user_about_deposit(user, amount, tx_hash)

                logger.info(f"‚úÖ Deposit processed: {amount} MORI for user {user.telegram_id}")
            else:
                await transaction.fail_transaction("–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ –±–∞–ª–∞–Ω—Å")
                logger.error(f"‚ùå Failed to add balance for user {user.telegram_id}")

        except Exception as e:
            logger.error(f"‚ùå Error processing deposit: {e}")

    async def _find_user_by_wallet(self, wallet_address: str) -> User:
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ—à–µ–ª—å–∫–∞"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ –ë–î
            # SELECT * FROM users WHERE wallet_address = %s

            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            return None

        except Exception as e:
            logger.error(f"‚ùå Error finding user by wallet {wallet_address}: {e}")
            return None

    async def _check_existing_transaction(self, tx_hash: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
            # SELECT COUNT(*) FROM transactions WHERE tx_hash = %s

            # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            return False

        except Exception as e:
            logger.error(f"‚ùå Error checking existing transaction: {e}")
            return False

    async def _notify_user_about_deposit(self, user: User, amount: Decimal, tx_hash: str):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ"""
        try:
            from bots.main_bot import bot

            message = f"""‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω!

üí∞ –°—É–º–º–∞: {amount:,.2f} MORI
üîó TX: {tx_hash[:12]}...
üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI

–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üéÆ"""

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="quick_game")],
                [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
            ])

            await bot.send_message(
                user.telegram_id,
                message,
                reply_markup=keyboard
            )

            logger.info(f"üì± Notified user {user.telegram_id} about deposit")

        except Exception as e:
            logger.error(f"‚ùå Error notifying user about deposit: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
deposit_monitor = DepositMonitor()


async def start_deposit_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ"""
    asyncio.create_task(deposit_monitor.start_monitoring())
    logger.info("üöÄ Deposit monitoring task started")


async def stop_deposit_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    await deposit_monitor.stop_monitoring()