#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""
import os
import sys
from pathlib import Path
import asyncio


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 9):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9+")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    else:
        print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
        return True


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: cp .env.example .env")
        return False

    print("‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    from dotenv import load_dotenv
    load_dotenv()

    required_vars = {
        "MAIN_BOT_TOKEN": "–¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞",
        "DATABASE_URL": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        "TELEGRAM_API_ID": "API ID –¥–ª—è user bot",
        "TELEGRAM_API_HASH": "API Hash –¥–ª—è user bot",
        "TELEGRAM_PHONE": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "ADMIN_IDS": "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
    }

    missing_vars = []
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value or value.startswith('your_') or value == '0':
            missing_vars.append(f"{var} ({description})")
        else:
            print(f"‚úÖ {var}: ****")

    if missing_vars:
        print("\n‚ùå –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
        for var in missing_vars:
            print(f"   ‚Ä¢ {var}")
        return False

    return True


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    required_packages = [
        'aiogram', 'telethon', 'psycopg2', 'sqlalchemy',
        'matplotlib', 'pandas', 'numpy', 'aiohttp'
    ]

    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")

    if missing_packages:
        print(f"\n‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False

    return True


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from config.settings import DB_CONFIG
        import psycopg2

        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        cursor.close()
        conn.close()

        print(f"‚úÖ PostgreSQL: {version[:20]}...")
        return True

    except ImportError:
        print("‚ùå psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psycopg2-binary")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL –≤ .env")
        return False


def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    required_dirs = [
        "logs", "static", "static/charts",
        "static/images", "bots/handlers"
    ]

    for directory in required_dirs:
        dir_path = Path(directory)
        if dir_path.exists():
            print(f"‚úÖ {directory}/")
        else:
            print(f"‚ö†Ô∏è  {directory}/ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)")

    return True


def check_telegram_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram"""
    from config.settings import MAIN_BOT_TOKEN, TELEGRAM_API_ID, ADMIN_IDS

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not MAIN_BOT_TOKEN or len(MAIN_BOT_TOKEN.split(':')) != 2:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç MAIN_BOT_TOKEN")
        print("   –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API_ID
    if not TELEGRAM_API_ID or TELEGRAM_API_ID == 0:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π TELEGRAM_API_ID")
        print("   –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://my.telegram.org")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ADMIN_IDS
    if not ADMIN_IDS:
        print("‚ö†Ô∏è  ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("   –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π ID —É @userinfobot")
    else:
        print(f"‚úÖ –ê–¥–º–∏–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {len(ADMIN_IDS)}")

    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö MORI DUELS BOT")
    print("=" * 50)

    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        ("–§–∞–π–ª .env", check_env_file),
        ("Python –ø–∞–∫–µ—Ç—ã", check_dependencies),
        ("–ü–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞", check_directories),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram", check_telegram_settings),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
    ]

    all_passed = True

    for check_name, check_func in checks:
        print(f"\nüìã {check_name}:")
        try:
            if asyncio.iscoroutinefunction(check_func):
                result = await check_func()
            else:
                result = check_func()

            if not result:
                all_passed = False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {check_name}: {e}")
            all_passed = False

    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å: python main.py")
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())