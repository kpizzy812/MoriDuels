#!/usr/bin/env python3
"""
–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ MORI Duels Bot
"""
import asyncio
import os
from pathlib import Path
from decimal import Decimal


async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        from database.connection import async_session, init_db

        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        async with async_session() as session:
            from sqlalchemy import text
            result = await session.execute(text("SELECT 1"))
            result.fetchone()

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK")
        return True

    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
        return False


async def check_database_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –ë–î"""
    try:
        from database.connection import async_session
        from sqlalchemy import text

        required_tables = ['users', 'duels', 'transactions', 'rooms', 'wallet_history']

        async with async_session() as session:
            for table in required_tables:
                result = await session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                count = result.scalar()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")

        return True

    except Exception as e:
        print(f"‚ùå –¢–∞–±–ª–∏—Ü—ã –ë–î: –û—à–∏–±–∫–∞ - {e}")
        return False


async def check_solana_service():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Solana —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from services.solana_service import solana_service
        from config.settings import BOT_WALLET_ADDRESS, MORI_TOKEN_MINT

        if not BOT_WALLET_ADDRESS:
            print("‚ùå Solana: BOT_WALLET_ADDRESS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        if not MORI_TOKEN_MINT:
            print("‚ùå Solana: MORI_TOKEN_MINT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RPC
        try:
            response = await solana_service.client.get_latest_blockhash()
            if response:
                print("‚úÖ Solana RPC: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK")
            else:
                print("‚ùå Solana RPC: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                return False
        except Exception as e:
            print(f"‚ùå Solana RPC: –û—à–∏–±–∫–∞ - {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—à–µ–ª–µ–∫ –±–æ—Ç–∞
        if solana_service.bot_keypair:
            print("‚úÖ Solana: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
        else:
            print("‚ùå Solana: –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å SOL
        sol_balance = await solana_service.get_sol_balance(BOT_WALLET_ADDRESS)
        if sol_balance is not None:
            print(f"‚úÖ Solana: SOL –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞: {sol_balance:.4f} SOL")
            if sol_balance < 0.01:
                print("‚ö†Ô∏è  Solana: –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å SOL –¥–ª—è –≥–∞–∑–∞!")
        else:
            print("‚ùå Solana: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MORI —Ç–æ–∫–µ–Ω
        mint_info = await solana_service.validate_token_mint_info(MORI_TOKEN_MINT)
        if mint_info.get("valid"):
            print(f"‚úÖ MORI —Ç–æ–∫–µ–Ω: –í–∞–ª–∏–¥–µ–Ω, decimals: {mint_info.get('decimals')}")
        else:
            print(f"‚ùå MORI —Ç–æ–∫–µ–Ω: –ù–µ–≤–∞–ª–∏–¥–µ–Ω - {mint_info.get('error')}")
            return False

        return True

    except Exception as e:
        print(f"‚ùå Solana —Å–µ—Ä–≤–∏—Å: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
        return False


async def check_telegram_bots():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤"""
    try:
        from config.settings import MAIN_BOT_TOKEN, TELEGRAM_API_ID, TELEGRAM_API_HASH

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
        if not MAIN_BOT_TOKEN or len(MAIN_BOT_TOKEN.split(':')) != 2:
            print("‚ùå Telegram: –ù–µ–≤–µ—Ä–Ω—ã–π MAIN_BOT_TOKEN")
            return False

        print("‚úÖ Telegram: MAIN_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not TELEGRAM_API_ID or TELEGRAM_API_ID == 0:
            print("‚ùå Telegram: TELEGRAM_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        if not TELEGRAM_API_HASH:
            print("‚ùå Telegram: TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        print("‚úÖ Telegram: User bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OK")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Ç–æ–∫–µ–Ω (–ø–∏–Ω–≥)
        import aiohttp
        async with aiohttp.ClientSession() as session:
            url = f"https://api.telegram.org/bot{MAIN_BOT_TOKEN}/getMe"
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        bot_info = data["result"]
                        print(f"‚úÖ Telegram: –ë–æ—Ç @{bot_info['username']} –∞–∫—Ç–∏–≤–µ–Ω")
                        return True
                    else:
                        print(f"‚ùå Telegram: –û—à–∏–±–∫–∞ API - {data}")
                        return False
                else:
                    print(f"‚ùå Telegram: HTTP {response.status}")
                    return False

    except Exception as e:
        print(f"‚ùå Telegram –±–æ—Ç—ã: –û—à–∏–±–∫–∞ - {e}")
        return False


async def check_admin_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from config.settings import ADMIN_IDS

        if not ADMIN_IDS:
            print("‚ö†Ô∏è  –ê–¥–º–∏–Ω—ã: ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False

        print(f"‚úÖ –ê–¥–º–∏–Ω—ã: –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ {len(ADMIN_IDS)} –∞–¥–º–∏–Ω–æ–≤")
        return True

    except Exception as e:
        print(f"‚ùå –ê–¥–º–∏–Ω—ã: –û—à–∏–±–∫–∞ - {e}")
        return False


async def check_game_logic():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    try:
        from services.game_service import game_service

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if hasattr(game_service, 'house_accounts') and game_service.house_accounts:
            print(f"‚úÖ –ò–≥—Ä–∞: House –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ({len(game_service.house_accounts)})")
        else:
            print("‚ö†Ô∏è  –ò–≥—Ä–∞: House –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–≤–æ–∫
        from config.settings import MIN_BET, MAX_BET, HOUSE_COMMISSION

        if MIN_BET > 0 and MAX_BET > MIN_BET:
            print(f"‚úÖ –ò–≥—Ä–∞: –°—Ç–∞–≤–∫–∏ {MIN_BET}-{MAX_BET} MORI")
        else:
            print("‚ùå –ò–≥—Ä–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–≤–æ–∫")
            return False

        if 0 < HOUSE_COMMISSION < 1:
            print(f"‚úÖ –ò–≥—Ä–∞: –ö–æ–º–∏—Å—Å–∏—è {HOUSE_COMMISSION * 100}%")
        else:
            print("‚ùå –ò–≥—Ä–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è")
            return False

        return True

    except Exception as e:
        print(f"‚ùå –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –û—à–∏–±–∫–∞ - {e}")
        return False


async def check_monitoring():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤"""
    try:
        from services.deposit_monitor import deposit_monitor

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        stats = await deposit_monitor.get_monitoring_stats()

        if "error" not in stats:
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤")
            print(f"   üìä –î–µ–ø–æ–∑–∏—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('deposits_total', {}).get('count', 0)}")
            return True
        else:
            print(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –û—à–∏–±–∫–∞ - {stats['error']}")
            return False

    except Exception as e:
        print(f"‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –û—à–∏–±–∫–∞ - {e}")
        return False


async def test_basic_flow():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
    try:
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞:")

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database.models.user import User

        test_user = await User.get_by_telegram_id(999999999)  # –¢–µ—Å—Ç–æ–≤—ã–π ID
        if test_user:
            print("‚úÖ –¢–µ—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
        else:
            print("‚ÑπÔ∏è  –¢–µ—Å—Ç: –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        from services.solana_service import validate_solana_address
        from config.settings import BOT_WALLET_ADDRESS

        test_addresses = [
            "9WzDXwBbmkg8ZTbNMqUxvQRAyrZzDsGYdLVL9zYtAWWM",  # –í–∞–ª–∏–¥–Ω—ã–π
            "invalid_address",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π
        ]

        if BOT_WALLET_ADDRESS:
            test_addresses.append(BOT_WALLET_ADDRESS)  # –ö–æ—à–µ–ª–µ–∫ –±–æ—Ç–∞

        for addr in test_addresses:
            is_valid = validate_solana_address(addr)
            status = "‚úÖ" if is_valid else "‚ùå"
            print(f"{status} –í–∞–ª–∏–¥–∞—Ü–∏—è: {addr[:12]}... = {is_valid}")

        return True

    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –û—à–∏–±–∫–∞ - {e}")
        return False


def show_final_report(results):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ì–û–¢–û–í–ù–û–°–¢–ò")
    print("=" * 60)

    passed = sum(results.values())
    total = len(results)
    percentage = (passed / total) * 100

    for check_name, passed in results.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"{status} {check_name}")

    print(f"\nüìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {passed}/{total} ({percentage:.1f}%)")

    if percentage >= 90:
        print("\nüéâ –ë–û–¢ –ì–û–¢–û–í –ö –ó–ê–ü–£–°–ö–£!")
        print("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py")
    elif percentage >= 70:
        print("\n‚ö†Ô∏è  –ë–û–¢ –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É")
    else:
        print("\n‚ùå –ë–û–¢ –ù–ï –ì–û–¢–û–í")
        print("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")

    print("\nüí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
    print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚úÖ Telegram —Ç–æ–∫–µ–Ω")
    print("  ‚úÖ Solana RPC")
    print("  ‚úÖ ADMIN_IDS")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    print("üîç –ò–¢–û–ì–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò MORI DUELS BOT")
    print("=" * 60)

    checks = {
        "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": await check_database_connection(),
        "–¢–∞–±–ª–∏—Ü—ã –ë–î": await check_database_tables(),
        "Solana —Å–µ—Ä–≤–∏—Å": await check_solana_service(),
        "Telegram –±–æ—Ç—ã": await check_telegram_bots(),
        "–ê–¥–º–∏–Ω—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏": await check_admin_settings(),
        "–ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞": await check_game_logic(),
        "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–æ–∑–∏—Ç–æ–≤": await check_monitoring(),
        "–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã": await test_basic_flow()
    }

    show_final_report(checks)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")