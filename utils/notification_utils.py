"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
from aiogram import Bot
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest
from aiogram.types import InlineKeyboardMarkup
from typing import Optional
from utils.logger import setup_logger

logger = setup_logger(__name__)


async def safe_send_message(
        bot: Bot,
        user_id: int,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        parse_mode: Optional[str] = None
) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(
            user_id,
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True

    except TelegramForbiddenError:
        logger.warning(f"üö´ User {user_id} blocked the bot, skipping notification")
        return False

    except TelegramBadRequest as e:
        logger.warning(f"‚ö†Ô∏è Bad request for user {user_id}: {e}")
        return False

    except Exception as e:
        logger.error(f"‚ùå Error sending message to user {user_id}: {e}")
        return False


async def safe_edit_message(
        bot: Bot,
        user_id: int,
        message_id: int,
        text: str,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
        parse_mode: Optional[str] = None
) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.edit_message_text(
            text=text,
            chat_id=user_id,
            message_id=message_id,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True

    except TelegramForbiddenError:
        logger.warning(f"üö´ User {user_id} blocked the bot, skipping edit")
        return False

    except TelegramBadRequest as e:
        logger.warning(f"‚ö†Ô∏è Bad request for user {user_id}: {e}")
        return False

    except Exception as e:
        logger.error(f"‚ùå Error editing message for user {user_id}: {e}")
        return False


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ
async def safe_notify_user_about_deposit(bot: Bot, user, amount, tx_hash):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ–ø–æ–∑–∏—Ç–µ"""
    try:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        message = f"""‚úÖ –î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω!

üí∞ –°—É–º–º–∞: {amount:,.2f} MORI
üîó TX: {tx_hash[:12]}...
üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance:,.2f} MORI

–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä–∞—Ç—å! üéÆ"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="quick_game")],
            [InlineKeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")]
        ])

        success = await safe_send_message(
            bot,
            user.telegram_id,
            message,
            reply_markup=keyboard
        )

        if success:
            logger.info(f"üì± Notified user {user.telegram_id} about deposit")
        else:
            logger.warning(f"‚ö†Ô∏è Failed to notify user {user.telegram_id} about deposit")

    except Exception as e:
        logger.error(f"‚ùå Error in safe_notify_user_about_deposit: {e}")


# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
async def safe_notify_opponent(bot: Bot, opponent_id: int, result: dict, current_user_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
    try:
        from database.models.user import User
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        opponent_won = (result["winner_id"] == opponent_id)
        coin_emoji = "üü°" if result["coin_result"] == "heads" else "‚ö™"
        coin_text = "–û–†–ï–õ" if result["coin_result"] == "heads" else "–†–ï–®–ö–ê"

        current_user = await User.get_by_telegram_id(current_user_id)
        current_user_name = f"@{current_user.username}" if current_user and current_user.username else f"Player {current_user_id}"

        if opponent_won:
            message_text = f"""üéâ –ü–û–ë–ï–î–ê! üéâ

–î—É—ç–ª—å —Å {current_user_name}:
{coin_emoji} –í—ã–ø–∞–ª: {coin_text}
üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {result['winner_amount']:,.2f} MORI

üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫!"""
        else:
            message_text = f"""üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ

–î—É—ç–ª—å —Å {current_user_name}:
{coin_emoji} –í—ã–ø–∞–ª: {coin_text}
üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É"""

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="quick_game")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ])

        success = await safe_send_message(
            bot,
            opponent_id,
            message_text,
            reply_markup=keyboard
        )

        if success:
            logger.info(f"‚úÖ Notified opponent {opponent_id} about duel result")
        else:
            logger.warning(f"‚ö†Ô∏è Failed to notify opponent {opponent_id}")

    except Exception as e:
        logger.error(f"‚ùå Error notifying opponent {opponent_id}: {e}")